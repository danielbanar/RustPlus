// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rustplus.proto

#include "rustplus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace rustplus {
constexpr AppMessage::AppMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_(nullptr)
  , broadcast_(nullptr){}
struct AppMessageDefaultTypeInternal {
  constexpr AppMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppMessageDefaultTypeInternal() {}
  union {
    AppMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppMessageDefaultTypeInternal _AppMessage_default_instance_;
constexpr AppRequest::AppRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : getinfo_(nullptr)
  , gettime_(nullptr)
  , getmap_(nullptr)
  , getteaminfo_(nullptr)
  , getteamchat_(nullptr)
  , sendteammessage_(nullptr)
  , getentityinfo_(nullptr)
  , setentityvalue_(nullptr)
  , checksubscription_(nullptr)
  , setsubscription_(nullptr)
  , getmapmarkers_(nullptr)
  , getcameraframe_(nullptr)
  , promotetoleader_(nullptr)
  , playerid_(uint64_t{0u})
  , seq_(0u)
  , playertoken_(0)
  , entityid_(0u){}
struct AppRequestDefaultTypeInternal {
  constexpr AppRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppRequestDefaultTypeInternal() {}
  union {
    AppRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppRequestDefaultTypeInternal _AppRequest_default_instance_;
constexpr AppSendMessage::AppSendMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AppSendMessageDefaultTypeInternal {
  constexpr AppSendMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppSendMessageDefaultTypeInternal() {}
  union {
    AppSendMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppSendMessageDefaultTypeInternal _AppSendMessage_default_instance_;
constexpr AppSetEntityValue::AppSetEntityValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct AppSetEntityValueDefaultTypeInternal {
  constexpr AppSetEntityValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppSetEntityValueDefaultTypeInternal() {}
  union {
    AppSetEntityValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppSetEntityValueDefaultTypeInternal _AppSetEntityValue_default_instance_;
constexpr AppCameraFrameRequest::AppCameraFrameRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , frame_(0u){}
struct AppCameraFrameRequestDefaultTypeInternal {
  constexpr AppCameraFrameRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppCameraFrameRequestDefaultTypeInternal() {}
  union {
    AppCameraFrameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppCameraFrameRequestDefaultTypeInternal _AppCameraFrameRequest_default_instance_;
constexpr AppPromoteToLeader::AppPromoteToLeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u}){}
struct AppPromoteToLeaderDefaultTypeInternal {
  constexpr AppPromoteToLeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppPromoteToLeaderDefaultTypeInternal() {}
  union {
    AppPromoteToLeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppPromoteToLeaderDefaultTypeInternal _AppPromoteToLeader_default_instance_;
constexpr AppResponse::AppResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(nullptr)
  , error_(nullptr)
  , info_(nullptr)
  , time_(nullptr)
  , map_(nullptr)
  , teaminfo_(nullptr)
  , teamchat_(nullptr)
  , entityinfo_(nullptr)
  , flag_(nullptr)
  , mapmarkers_(nullptr)
  , cameraframe_(nullptr)
  , seq_(0u){}
struct AppResponseDefaultTypeInternal {
  constexpr AppResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppResponseDefaultTypeInternal() {}
  union {
    AppResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppResponseDefaultTypeInternal _AppResponse_default_instance_;
constexpr AppBroadcast::AppBroadcast(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : teamchanged_(nullptr)
  , teammessage_(nullptr)
  , entitychanged_(nullptr){}
struct AppBroadcastDefaultTypeInternal {
  constexpr AppBroadcastDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppBroadcastDefaultTypeInternal() {}
  union {
    AppBroadcast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppBroadcastDefaultTypeInternal _AppBroadcast_default_instance_;
constexpr AppEmpty::AppEmpty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AppEmptyDefaultTypeInternal {
  constexpr AppEmptyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppEmptyDefaultTypeInternal() {}
  union {
    AppEmpty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppEmptyDefaultTypeInternal _AppEmpty_default_instance_;
constexpr AppSuccess::AppSuccess(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AppSuccessDefaultTypeInternal {
  constexpr AppSuccessDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppSuccessDefaultTypeInternal() {}
  union {
    AppSuccess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppSuccessDefaultTypeInternal _AppSuccess_default_instance_;
constexpr AppError::AppError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AppErrorDefaultTypeInternal {
  constexpr AppErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppErrorDefaultTypeInternal() {}
  union {
    AppError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppErrorDefaultTypeInternal _AppError_default_instance_;
constexpr AppInfo::AppInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , headerimage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mapsize_(0u)
  , wipetime_(0u)
  , players_(0u)
  , maxplayers_(0u)
  , queuedplayers_(0u)
  , seed_(0u)
  , salt_(0u){}
struct AppInfoDefaultTypeInternal {
  constexpr AppInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppInfoDefaultTypeInternal() {}
  union {
    AppInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppInfoDefaultTypeInternal _AppInfo_default_instance_;
constexpr AppTime::AppTime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : daylengthminutes_(0)
  , timescale_(0)
  , sunrise_(0)
  , sunset_(0)
  , time_(0){}
struct AppTimeDefaultTypeInternal {
  constexpr AppTimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppTimeDefaultTypeInternal() {}
  union {
    AppTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppTimeDefaultTypeInternal _AppTime_default_instance_;
constexpr AppMap_Monument::AppMap_Monument(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_(0)
  , y_(0){}
struct AppMap_MonumentDefaultTypeInternal {
  constexpr AppMap_MonumentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppMap_MonumentDefaultTypeInternal() {}
  union {
    AppMap_Monument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppMap_MonumentDefaultTypeInternal _AppMap_Monument_default_instance_;
constexpr AppMap::AppMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : monuments_()
  , jpgimage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , background_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0u)
  , height_(0u)
  , oceanmargin_(0){}
struct AppMapDefaultTypeInternal {
  constexpr AppMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppMapDefaultTypeInternal() {}
  union {
    AppMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppMapDefaultTypeInternal _AppMap_default_instance_;
constexpr AppTeamInfo_Member::AppTeamInfo_Member(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , spawntime_(0u)
  , isonline_(false)
  , isalive_(false)
  , deathtime_(0u){}
struct AppTeamInfo_MemberDefaultTypeInternal {
  constexpr AppTeamInfo_MemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppTeamInfo_MemberDefaultTypeInternal() {}
  union {
    AppTeamInfo_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppTeamInfo_MemberDefaultTypeInternal _AppTeamInfo_Member_default_instance_;
constexpr AppTeamInfo_Note::AppTeamInfo_Note(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
  , x_(0)
  , y_(0){}
struct AppTeamInfo_NoteDefaultTypeInternal {
  constexpr AppTeamInfo_NoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppTeamInfo_NoteDefaultTypeInternal() {}
  union {
    AppTeamInfo_Note _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppTeamInfo_NoteDefaultTypeInternal _AppTeamInfo_Note_default_instance_;
constexpr AppTeamInfo::AppTeamInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , mapnotes_()
  , leadermapnotes_()
  , leadersteamid_(uint64_t{0u}){}
struct AppTeamInfoDefaultTypeInternal {
  constexpr AppTeamInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppTeamInfoDefaultTypeInternal() {}
  union {
    AppTeamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppTeamInfoDefaultTypeInternal _AppTeamInfo_default_instance_;
constexpr AppTeamChat::AppTeamChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_(){}
struct AppTeamChatDefaultTypeInternal {
  constexpr AppTeamChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppTeamChatDefaultTypeInternal() {}
  union {
    AppTeamChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppTeamChatDefaultTypeInternal _AppTeamChat_default_instance_;
constexpr AppChatMessage::AppChatMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , time_(0u){}
struct AppChatMessageDefaultTypeInternal {
  constexpr AppChatMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppChatMessageDefaultTypeInternal() {}
  union {
    AppChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppChatMessageDefaultTypeInternal _AppChatMessage_default_instance_;
constexpr AppEntityInfo::AppEntityInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(nullptr)
  , type_(1)
{}
struct AppEntityInfoDefaultTypeInternal {
  constexpr AppEntityInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppEntityInfoDefaultTypeInternal() {}
  union {
    AppEntityInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppEntityInfoDefaultTypeInternal _AppEntityInfo_default_instance_;
constexpr AppEntityPayload_Item::AppEntityPayload_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemid_(0)
  , quantity_(0)
  , itemisblueprint_(false){}
struct AppEntityPayload_ItemDefaultTypeInternal {
  constexpr AppEntityPayload_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppEntityPayload_ItemDefaultTypeInternal() {}
  union {
    AppEntityPayload_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppEntityPayload_ItemDefaultTypeInternal _AppEntityPayload_Item_default_instance_;
constexpr AppEntityPayload::AppEntityPayload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , value_(false)
  , hasprotection_(false)
  , capacity_(0)
  , protectionexpiry_(0u){}
struct AppEntityPayloadDefaultTypeInternal {
  constexpr AppEntityPayloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppEntityPayloadDefaultTypeInternal() {}
  union {
    AppEntityPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppEntityPayloadDefaultTypeInternal _AppEntityPayload_default_instance_;
constexpr AppFlag::AppFlag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct AppFlagDefaultTypeInternal {
  constexpr AppFlagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppFlagDefaultTypeInternal() {}
  union {
    AppFlag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppFlagDefaultTypeInternal _AppFlag_default_instance_;
constexpr AppMapMarkers::AppMapMarkers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : markers_(){}
struct AppMapMarkersDefaultTypeInternal {
  constexpr AppMapMarkersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppMapMarkersDefaultTypeInternal() {}
  union {
    AppMapMarkers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppMapMarkersDefaultTypeInternal _AppMapMarkers_default_instance_;
constexpr Vector4::Vector4(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0)
  , w_(0){}
struct Vector4DefaultTypeInternal {
  constexpr Vector4DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector4DefaultTypeInternal() {}
  union {
    Vector4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector4DefaultTypeInternal _Vector4_default_instance_;
constexpr AppMarker_SellOrder::AppMarker_SellOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemid_(0)
  , quantity_(0)
  , currencyid_(0)
  , costperitem_(0)
  , amountinstock_(0)
  , itemisblueprint_(false)
  , currencyisblueprint_(false){}
struct AppMarker_SellOrderDefaultTypeInternal {
  constexpr AppMarker_SellOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppMarker_SellOrderDefaultTypeInternal() {}
  union {
    AppMarker_SellOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppMarker_SellOrderDefaultTypeInternal _AppMarker_SellOrder_default_instance_;
constexpr AppMarker::AppMarker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sellorders_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color1_(nullptr)
  , color2_(nullptr)
  , id_(0u)
  , x_(0)
  , steamid_(uint64_t{0u})
  , y_(0)
  , rotation_(0)
  , radius_(0)
  , alpha_(0)
  , type_(1)
{}
struct AppMarkerDefaultTypeInternal {
  constexpr AppMarkerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppMarkerDefaultTypeInternal() {}
  union {
    AppMarker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppMarkerDefaultTypeInternal _AppMarker_default_instance_;
constexpr AppCameraFrame::AppCameraFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : jpgimage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , frame_(0u){}
struct AppCameraFrameDefaultTypeInternal {
  constexpr AppCameraFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppCameraFrameDefaultTypeInternal() {}
  union {
    AppCameraFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppCameraFrameDefaultTypeInternal _AppCameraFrame_default_instance_;
constexpr AppTeamChanged::AppTeamChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : teaminfo_(nullptr)
  , playerid_(uint64_t{0u}){}
struct AppTeamChangedDefaultTypeInternal {
  constexpr AppTeamChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppTeamChangedDefaultTypeInternal() {}
  union {
    AppTeamChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppTeamChangedDefaultTypeInternal _AppTeamChanged_default_instance_;
constexpr AppTeamMessage::AppTeamMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(nullptr){}
struct AppTeamMessageDefaultTypeInternal {
  constexpr AppTeamMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppTeamMessageDefaultTypeInternal() {}
  union {
    AppTeamMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppTeamMessageDefaultTypeInternal _AppTeamMessage_default_instance_;
constexpr AppEntityChanged::AppEntityChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(nullptr)
  , entityid_(0u){}
struct AppEntityChangedDefaultTypeInternal {
  constexpr AppEntityChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppEntityChangedDefaultTypeInternal() {}
  union {
    AppEntityChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppEntityChangedDefaultTypeInternal _AppEntityChanged_default_instance_;
}  // namespace rustplus
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rustplus_2eproto[32];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rustplus_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rustplus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rustplus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMessage, response_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMessage, broadcast_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, seq_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, playerid_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, playertoken_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, entityid_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, getinfo_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, gettime_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, getmap_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, getteaminfo_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, getteamchat_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, sendteammessage_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, getentityinfo_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, setentityvalue_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, checksubscription_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, setsubscription_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, getmapmarkers_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, getcameraframe_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppRequest, promotetoleader_),
  14,
  13,
  15,
  16,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppSendMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppSendMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppSendMessage, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppSetEntityValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppSetEntityValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppSetEntityValue, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppCameraFrameRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppCameraFrameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppCameraFrameRequest, identifier_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppCameraFrameRequest, frame_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppPromoteToLeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppPromoteToLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppPromoteToLeader, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppResponse, seq_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppResponse, success_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppResponse, error_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppResponse, info_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppResponse, time_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppResponse, map_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppResponse, teaminfo_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppResponse, teamchat_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppResponse, entityinfo_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppResponse, flag_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppResponse, mapmarkers_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppResponse, cameraframe_),
  11,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppBroadcast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppBroadcast, teamchanged_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppBroadcast, teammessage_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppBroadcast, entitychanged_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEmpty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppError, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppError, error_),
  0,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppInfo, name_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppInfo, headerimage_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppInfo, url_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppInfo, map_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppInfo, mapsize_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppInfo, wipetime_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppInfo, players_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppInfo, maxplayers_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppInfo, queuedplayers_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppInfo, seed_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppInfo, salt_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTime, daylengthminutes_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTime, timescale_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTime, sunrise_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTime, sunset_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTime, time_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMap_Monument, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMap_Monument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMap_Monument, token_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMap_Monument, x_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMap_Monument, y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMap, width_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMap, height_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMap, jpgimage_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMap, oceanmargin_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMap, monuments_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMap, background_),
  2,
  3,
  0,
  4,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo_Member, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo_Member, steamid_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo_Member, name_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo_Member, x_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo_Member, y_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo_Member, isonline_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo_Member, spawntime_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo_Member, isalive_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo_Member, deathtime_),
  1,
  0,
  2,
  3,
  5,
  4,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo_Note, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo_Note, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo_Note, type_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo_Note, x_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo_Note, y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo, leadersteamid_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo, members_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo, mapnotes_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamInfo, leadermapnotes_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamChat, messages_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppChatMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppChatMessage, steamid_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppChatMessage, name_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppChatMessage, message_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppChatMessage, color_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppChatMessage, time_),
  3,
  0,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityInfo, type_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityInfo, payload_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityPayload_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityPayload_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityPayload_Item, itemid_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityPayload_Item, quantity_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityPayload_Item, itemisblueprint_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityPayload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityPayload, value_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityPayload, items_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityPayload, capacity_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityPayload, hasprotection_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityPayload, protectionexpiry_),
  0,
  ~0u,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppFlag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppFlag, value_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMapMarkers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMapMarkers, markers_),
  PROTOBUF_FIELD_OFFSET(::rustplus::Vector4, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::Vector4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::Vector4, x_),
  PROTOBUF_FIELD_OFFSET(::rustplus::Vector4, y_),
  PROTOBUF_FIELD_OFFSET(::rustplus::Vector4, z_),
  PROTOBUF_FIELD_OFFSET(::rustplus::Vector4, w_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker_SellOrder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker_SellOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker_SellOrder, itemid_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker_SellOrder, quantity_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker_SellOrder, currencyid_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker_SellOrder, costperitem_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker_SellOrder, amountinstock_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker_SellOrder, itemisblueprint_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker_SellOrder, currencyisblueprint_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker, id_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker, type_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker, x_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker, y_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker, steamid_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker, rotation_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker, radius_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker, color1_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker, color2_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker, alpha_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker, name_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppMarker, sellorders_),
  3,
  10,
  4,
  6,
  5,
  7,
  8,
  1,
  2,
  9,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppCameraFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppCameraFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppCameraFrame, frame_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppCameraFrame, jpgimage_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamChanged, playerid_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamChanged, teaminfo_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppTeamMessage, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityChanged, entityid_),
  PROTOBUF_FIELD_OFFSET(::rustplus::AppEntityChanged, payload_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::rustplus::AppMessage)},
  { 9, 31, sizeof(::rustplus::AppRequest)},
  { 48, 54, sizeof(::rustplus::AppSendMessage)},
  { 55, 61, sizeof(::rustplus::AppSetEntityValue)},
  { 62, 69, sizeof(::rustplus::AppCameraFrameRequest)},
  { 71, 77, sizeof(::rustplus::AppPromoteToLeader)},
  { 78, 95, sizeof(::rustplus::AppResponse)},
  { 107, 115, sizeof(::rustplus::AppBroadcast)},
  { 118, -1, sizeof(::rustplus::AppEmpty)},
  { 123, -1, sizeof(::rustplus::AppSuccess)},
  { 128, 134, sizeof(::rustplus::AppError)},
  { 135, 151, sizeof(::rustplus::AppInfo)},
  { 162, 172, sizeof(::rustplus::AppTime)},
  { 177, 185, sizeof(::rustplus::AppMap_Monument)},
  { 188, 199, sizeof(::rustplus::AppMap)},
  { 205, 218, sizeof(::rustplus::AppTeamInfo_Member)},
  { 226, 234, sizeof(::rustplus::AppTeamInfo_Note)},
  { 237, 246, sizeof(::rustplus::AppTeamInfo)},
  { 250, -1, sizeof(::rustplus::AppTeamChat)},
  { 256, 266, sizeof(::rustplus::AppChatMessage)},
  { 271, 278, sizeof(::rustplus::AppEntityInfo)},
  { 280, 288, sizeof(::rustplus::AppEntityPayload_Item)},
  { 291, 301, sizeof(::rustplus::AppEntityPayload)},
  { 306, 312, sizeof(::rustplus::AppFlag)},
  { 313, -1, sizeof(::rustplus::AppMapMarkers)},
  { 319, 328, sizeof(::rustplus::Vector4)},
  { 332, 344, sizeof(::rustplus::AppMarker_SellOrder)},
  { 351, 368, sizeof(::rustplus::AppMarker)},
  { 380, 387, sizeof(::rustplus::AppCameraFrame)},
  { 389, 396, sizeof(::rustplus::AppTeamChanged)},
  { 398, 404, sizeof(::rustplus::AppTeamMessage)},
  { 405, 412, sizeof(::rustplus::AppEntityChanged)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppSendMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppSetEntityValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppCameraFrameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppPromoteToLeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppEmpty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppSuccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppMap_Monument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppTeamInfo_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppTeamInfo_Note_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppTeamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppTeamChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppChatMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppEntityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppEntityPayload_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppEntityPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppFlag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppMapMarkers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_Vector4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppMarker_SellOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppMarker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppCameraFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppTeamChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppTeamMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rustplus::_AppEntityChanged_default_instance_),
};

const char descriptor_table_protodef_rustplus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016rustplus.proto\022\010rustplus\"`\n\nAppMessage"
  "\022\'\n\010response\030\001 \001(\0132\025.rustplus.AppRespons"
  "e\022)\n\tbroadcast\030\002 \001(\0132\026.rustplus.AppBroad"
  "cast\"\233\005\n\nAppRequest\022\013\n\003seq\030\001 \002(\r\022\020\n\010play"
  "erId\030\002 \002(\004\022\023\n\013playerToken\030\003 \002(\005\022\020\n\010entit"
  "yId\030\004 \001(\r\022#\n\007getInfo\030\010 \001(\0132\022.rustplus.Ap"
  "pEmpty\022#\n\007getTime\030\t \001(\0132\022.rustplus.AppEm"
  "pty\022\"\n\006getMap\030\n \001(\0132\022.rustplus.AppEmpty\022"
  "\'\n\013getTeamInfo\030\013 \001(\0132\022.rustplus.AppEmpty"
  "\022\'\n\013getTeamChat\030\014 \001(\0132\022.rustplus.AppEmpt"
  "y\0221\n\017sendTeamMessage\030\r \001(\0132\030.rustplus.Ap"
  "pSendMessage\022)\n\rgetEntityInfo\030\016 \001(\0132\022.ru"
  "stplus.AppEmpty\0223\n\016setEntityValue\030\017 \001(\0132"
  "\033.rustplus.AppSetEntityValue\022-\n\021checkSub"
  "scription\030\020 \001(\0132\022.rustplus.AppEmpty\022*\n\017s"
  "etSubscription\030\021 \001(\0132\021.rustplus.AppFlag\022"
  ")\n\rgetMapMarkers\030\022 \001(\0132\022.rustplus.AppEmp"
  "ty\0227\n\016getCameraFrame\030\023 \001(\0132\037.rustplus.Ap"
  "pCameraFrameRequest\0225\n\017promoteToLeader\030\024"
  " \001(\0132\034.rustplus.AppPromoteToLeader\"!\n\016Ap"
  "pSendMessage\022\017\n\007message\030\001 \002(\t\"\"\n\021AppSetE"
  "ntityValue\022\r\n\005value\030\001 \002(\010\":\n\025AppCameraFr"
  "ameRequest\022\022\n\nidentifier\030\001 \002(\t\022\r\n\005frame\030"
  "\002 \002(\r\"%\n\022AppPromoteToLeader\022\017\n\007steamId\030\001"
  " \002(\004\"\301\003\n\013AppResponse\022\013\n\003seq\030\001 \002(\r\022%\n\007suc"
  "cess\030\004 \001(\0132\024.rustplus.AppSuccess\022!\n\005erro"
  "r\030\005 \001(\0132\022.rustplus.AppError\022\037\n\004info\030\006 \001("
  "\0132\021.rustplus.AppInfo\022\037\n\004time\030\007 \001(\0132\021.rus"
  "tplus.AppTime\022\035\n\003map\030\010 \001(\0132\020.rustplus.Ap"
  "pMap\022\'\n\010teamInfo\030\t \001(\0132\025.rustplus.AppTea"
  "mInfo\022\'\n\010teamChat\030\n \001(\0132\025.rustplus.AppTe"
  "amChat\022+\n\nentityInfo\030\013 \001(\0132\027.rustplus.Ap"
  "pEntityInfo\022\037\n\004flag\030\014 \001(\0132\021.rustplus.App"
  "Flag\022+\n\nmapMarkers\030\r \001(\0132\027.rustplus.AppM"
  "apMarkers\022-\n\013cameraFrame\030\016 \001(\0132\030.rustplu"
  "s.AppCameraFrame\"\237\001\n\014AppBroadcast\022-\n\013tea"
  "mChanged\030\004 \001(\0132\030.rustplus.AppTeamChanged"
  "\022-\n\013teamMessage\030\005 \001(\0132\030.rustplus.AppTeam"
  "Message\0221\n\rentityChanged\030\006 \001(\0132\032.rustplu"
  "s.AppEntityChanged\"\n\n\010AppEmpty\"\014\n\nAppSuc"
  "cess\"\031\n\010AppError\022\r\n\005error\030\001 \002(\t\"\301\001\n\007AppI"
  "nfo\022\014\n\004name\030\001 \002(\t\022\023\n\013headerImage\030\002 \002(\t\022\013"
  "\n\003url\030\003 \002(\t\022\013\n\003map\030\004 \002(\t\022\017\n\007mapSize\030\005 \002("
  "\r\022\020\n\010wipeTime\030\006 \002(\r\022\017\n\007players\030\007 \002(\r\022\022\n\n"
  "maxPlayers\030\010 \002(\r\022\025\n\rqueuedPlayers\030\t \002(\r\022"
  "\014\n\004seed\030\n \001(\r\022\014\n\004salt\030\013 \001(\r\"e\n\007AppTime\022\030"
  "\n\020dayLengthMinutes\030\001 \002(\002\022\021\n\ttimeScale\030\002 "
  "\002(\002\022\017\n\007sunrise\030\003 \002(\002\022\016\n\006sunset\030\004 \002(\002\022\014\n\004"
  "time\030\005 \002(\002\"\301\001\n\006AppMap\022\r\n\005width\030\001 \002(\r\022\016\n\006"
  "height\030\002 \002(\r\022\020\n\010jpgImage\030\003 \002(\014\022\023\n\013oceanM"
  "argin\030\004 \002(\005\022,\n\tmonuments\030\005 \003(\0132\031.rustplu"
  "s.AppMap.Monument\022\022\n\nbackground\030\006 \001(\t\032/\n"
  "\010Monument\022\r\n\005token\030\001 \002(\t\022\t\n\001x\030\002 \002(\002\022\t\n\001y"
  "\030\003 \002(\002\"\352\002\n\013AppTeamInfo\022\025\n\rleaderSteamId\030"
  "\001 \002(\004\022-\n\007members\030\002 \003(\0132\034.rustplus.AppTea"
  "mInfo.Member\022,\n\010mapNotes\030\003 \003(\0132\032.rustplu"
  "s.AppTeamInfo.Note\0222\n\016leaderMapNotes\030\004 \003"
  "(\0132\032.rustplus.AppTeamInfo.Note\032\206\001\n\006Membe"
  "r\022\017\n\007steamId\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\022\t\n\001x\030\003 "
  "\002(\002\022\t\n\001y\030\004 \002(\002\022\020\n\010isOnline\030\005 \002(\010\022\021\n\tspaw"
  "nTime\030\006 \002(\r\022\017\n\007isAlive\030\007 \002(\010\022\021\n\tdeathTim"
  "e\030\010 \002(\r\032*\n\004Note\022\014\n\004type\030\002 \002(\005\022\t\n\001x\030\003 \002(\002"
  "\022\t\n\001y\030\004 \002(\002\"9\n\013AppTeamChat\022*\n\010messages\030\001"
  " \003(\0132\030.rustplus.AppChatMessage\"]\n\016AppCha"
  "tMessage\022\017\n\007steamId\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\022"
  "\017\n\007message\030\003 \002(\t\022\r\n\005color\030\004 \002(\t\022\014\n\004time\030"
  "\005 \002(\r\"c\n\rAppEntityInfo\022%\n\004type\030\001 \002(\0162\027.r"
  "ustplus.AppEntityType\022+\n\007payload\030\003 \002(\0132\032"
  ".rustplus.AppEntityPayload\"\327\001\n\020AppEntity"
  "Payload\022\r\n\005value\030\001 \001(\010\022.\n\005items\030\002 \003(\0132\037."
  "rustplus.AppEntityPayload.Item\022\020\n\010capaci"
  "ty\030\003 \001(\005\022\025\n\rhasProtection\030\004 \001(\010\022\030\n\020prote"
  "ctionExpiry\030\005 \001(\r\032A\n\004Item\022\016\n\006itemId\030\001 \002("
  "\005\022\020\n\010quantity\030\002 \002(\005\022\027\n\017itemIsBlueprint\030\003"
  " \002(\010\"\030\n\007AppFlag\022\r\n\005value\030\001 \002(\010\"5\n\rAppMap"
  "Markers\022$\n\007markers\030\001 \003(\0132\023.rustplus.AppM"
  "arker\"5\n\007Vector4\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t"
  "\n\001z\030\003 \001(\002\022\t\n\001w\030\004 \001(\002\"\303\003\n\tAppMarker\022\n\n\002id"
  "\030\001 \002(\r\022%\n\004type\030\002 \002(\0162\027.rustplus.AppMarke"
  "rType\022\t\n\001x\030\003 \002(\002\022\t\n\001y\030\004 \002(\002\022\017\n\007steamId\030\005"
  " \001(\004\022\020\n\010rotation\030\006 \001(\002\022\016\n\006radius\030\007 \001(\002\022!"
  "\n\006color1\030\010 \001(\0132\021.rustplus.Vector4\022!\n\006col"
  "or2\030\t \001(\0132\021.rustplus.Vector4\022\r\n\005alpha\030\n "
  "\001(\002\022\014\n\004name\030\013 \001(\t\0221\n\nsellOrders\030\r \003(\0132\035."
  "rustplus.AppMarker.SellOrder\032\243\001\n\tSellOrd"
  "er\022\016\n\006itemId\030\001 \002(\005\022\020\n\010quantity\030\002 \002(\005\022\022\n\n"
  "currencyId\030\003 \002(\005\022\023\n\013costPerItem\030\004 \002(\005\022\025\n"
  "\ramountInStock\030\005 \002(\005\022\027\n\017itemIsBlueprint\030"
  "\006 \002(\010\022\033\n\023currencyIsBlueprint\030\007 \002(\010\"1\n\016Ap"
  "pCameraFrame\022\r\n\005frame\030\001 \002(\r\022\020\n\010jpgImage\030"
  "\002 \002(\014\"K\n\016AppTeamChanged\022\020\n\010playerId\030\001 \002("
  "\004\022\'\n\010teamInfo\030\002 \002(\0132\025.rustplus.AppTeamIn"
  "fo\";\n\016AppTeamMessage\022)\n\007message\030\001 \002(\0132\030."
  "rustplus.AppChatMessage\"Q\n\020AppEntityChan"
  "ged\022\020\n\010entityId\030\001 \002(\r\022+\n\007payload\030\002 \002(\0132\032"
  ".rustplus.AppEntityPayload*:\n\rAppEntityT"
  "ype\022\n\n\006Switch\020\001\022\t\n\005Alarm\020\002\022\022\n\016StorageMon"
  "itor\020\003*\201\001\n\rAppMarkerType\022\n\n\006Player\020\001\022\r\n\t"
  "Explosion\020\002\022\022\n\016VendingMachine\020\003\022\010\n\004CH47\020"
  "\004\022\r\n\tCargoShip\020\005\022\t\n\005Crate\020\006\022\021\n\rGenericRa"
  "dius\020\007\022\n\n\006Patrol\020\010"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rustplus_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rustplus_2eproto = {
  false, false, 4018, descriptor_table_protodef_rustplus_2eproto, "rustplus.proto", 
  &descriptor_table_rustplus_2eproto_once, nullptr, 0, 32,
  schemas, file_default_instances, TableStruct_rustplus_2eproto::offsets,
  file_level_metadata_rustplus_2eproto, file_level_enum_descriptors_rustplus_2eproto, file_level_service_descriptors_rustplus_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_rustplus_2eproto_getter() {
  return &descriptor_table_rustplus_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_rustplus_2eproto(&descriptor_table_rustplus_2eproto);
namespace rustplus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppEntityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rustplus_2eproto);
  return file_level_enum_descriptors_rustplus_2eproto[0];
}
bool AppEntityType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppMarkerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rustplus_2eproto);
  return file_level_enum_descriptors_rustplus_2eproto[1];
}
bool AppMarkerType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AppMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AppMessage>()._has_bits_);
  static const ::rustplus::AppResponse& response(const AppMessage* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::rustplus::AppBroadcast& broadcast(const AppMessage* msg);
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::rustplus::AppResponse&
AppMessage::_Internal::response(const AppMessage* msg) {
  return *msg->response_;
}
const ::rustplus::AppBroadcast&
AppMessage::_Internal::broadcast(const AppMessage* msg) {
  return *msg->broadcast_;
}
AppMessage::AppMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppMessage)
}
AppMessage::AppMessage(const AppMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    response_ = new ::rustplus::AppResponse(*from.response_);
  } else {
    response_ = nullptr;
  }
  if (from._internal_has_broadcast()) {
    broadcast_ = new ::rustplus::AppBroadcast(*from.broadcast_);
  } else {
    broadcast_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rustplus.AppMessage)
}

inline void AppMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&broadcast_) -
    reinterpret_cast<char*>(&response_)) + sizeof(broadcast_));
}

AppMessage::~AppMessage() {
  // @@protoc_insertion_point(destructor:rustplus.AppMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete response_;
  if (this != internal_default_instance()) delete broadcast_;
}

void AppMessage::ArenaDtor(void* object) {
  AppMessage* _this = reinterpret_cast< AppMessage* >(object);
  (void)_this;
}
void AppMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(response_ != nullptr);
      response_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(broadcast_ != nullptr);
      broadcast_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .rustplus.AppResponse response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppBroadcast broadcast = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .rustplus.AppResponse response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::response(this), target, stream);
  }

  // optional .rustplus.AppBroadcast broadcast = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::broadcast(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppMessage)
  return target;
}

size_t AppMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .rustplus.AppResponse response = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_);
    }

    // optional .rustplus.AppBroadcast broadcast = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broadcast_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppMessage::GetClassData() const { return &_class_data_; }

void AppMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppMessage *>(to)->MergeFrom(
      static_cast<const AppMessage &>(from));
}


void AppMessage::MergeFrom(const AppMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_response()->::rustplus::AppResponse::MergeFrom(from._internal_response());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_broadcast()->::rustplus::AppBroadcast::MergeFrom(from._internal_broadcast());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppMessage::CopyFrom(const AppMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMessage::IsInitialized() const {
  if (_internal_has_response()) {
    if (!response_->IsInitialized()) return false;
  }
  if (_internal_has_broadcast()) {
    if (!broadcast_->IsInitialized()) return false;
  }
  return true;
}

void AppMessage::InternalSwap(AppMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppMessage, broadcast_)
      + sizeof(AppMessage::broadcast_)
      - PROTOBUF_FIELD_OFFSET(AppMessage, response_)>(
          reinterpret_cast<char*>(&response_),
          reinterpret_cast<char*>(&other->response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[0]);
}

// ===================================================================

class AppRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AppRequest>()._has_bits_);
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_playertoken(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_entityid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::rustplus::AppEmpty& getinfo(const AppRequest* msg);
  static void set_has_getinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::rustplus::AppEmpty& gettime(const AppRequest* msg);
  static void set_has_gettime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::rustplus::AppEmpty& getmap(const AppRequest* msg);
  static void set_has_getmap(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::rustplus::AppEmpty& getteaminfo(const AppRequest* msg);
  static void set_has_getteaminfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::rustplus::AppEmpty& getteamchat(const AppRequest* msg);
  static void set_has_getteamchat(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::rustplus::AppSendMessage& sendteammessage(const AppRequest* msg);
  static void set_has_sendteammessage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::rustplus::AppEmpty& getentityinfo(const AppRequest* msg);
  static void set_has_getentityinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::rustplus::AppSetEntityValue& setentityvalue(const AppRequest* msg);
  static void set_has_setentityvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::rustplus::AppEmpty& checksubscription(const AppRequest* msg);
  static void set_has_checksubscription(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::rustplus::AppFlag& setsubscription(const AppRequest* msg);
  static void set_has_setsubscription(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::rustplus::AppEmpty& getmapmarkers(const AppRequest* msg);
  static void set_has_getmapmarkers(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::rustplus::AppCameraFrameRequest& getcameraframe(const AppRequest* msg);
  static void set_has_getcameraframe(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::rustplus::AppPromoteToLeader& promotetoleader(const AppRequest* msg);
  static void set_has_promotetoleader(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000e000) ^ 0x0000e000) != 0;
  }
};

const ::rustplus::AppEmpty&
AppRequest::_Internal::getinfo(const AppRequest* msg) {
  return *msg->getinfo_;
}
const ::rustplus::AppEmpty&
AppRequest::_Internal::gettime(const AppRequest* msg) {
  return *msg->gettime_;
}
const ::rustplus::AppEmpty&
AppRequest::_Internal::getmap(const AppRequest* msg) {
  return *msg->getmap_;
}
const ::rustplus::AppEmpty&
AppRequest::_Internal::getteaminfo(const AppRequest* msg) {
  return *msg->getteaminfo_;
}
const ::rustplus::AppEmpty&
AppRequest::_Internal::getteamchat(const AppRequest* msg) {
  return *msg->getteamchat_;
}
const ::rustplus::AppSendMessage&
AppRequest::_Internal::sendteammessage(const AppRequest* msg) {
  return *msg->sendteammessage_;
}
const ::rustplus::AppEmpty&
AppRequest::_Internal::getentityinfo(const AppRequest* msg) {
  return *msg->getentityinfo_;
}
const ::rustplus::AppSetEntityValue&
AppRequest::_Internal::setentityvalue(const AppRequest* msg) {
  return *msg->setentityvalue_;
}
const ::rustplus::AppEmpty&
AppRequest::_Internal::checksubscription(const AppRequest* msg) {
  return *msg->checksubscription_;
}
const ::rustplus::AppFlag&
AppRequest::_Internal::setsubscription(const AppRequest* msg) {
  return *msg->setsubscription_;
}
const ::rustplus::AppEmpty&
AppRequest::_Internal::getmapmarkers(const AppRequest* msg) {
  return *msg->getmapmarkers_;
}
const ::rustplus::AppCameraFrameRequest&
AppRequest::_Internal::getcameraframe(const AppRequest* msg) {
  return *msg->getcameraframe_;
}
const ::rustplus::AppPromoteToLeader&
AppRequest::_Internal::promotetoleader(const AppRequest* msg) {
  return *msg->promotetoleader_;
}
AppRequest::AppRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppRequest)
}
AppRequest::AppRequest(const AppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_getinfo()) {
    getinfo_ = new ::rustplus::AppEmpty(*from.getinfo_);
  } else {
    getinfo_ = nullptr;
  }
  if (from._internal_has_gettime()) {
    gettime_ = new ::rustplus::AppEmpty(*from.gettime_);
  } else {
    gettime_ = nullptr;
  }
  if (from._internal_has_getmap()) {
    getmap_ = new ::rustplus::AppEmpty(*from.getmap_);
  } else {
    getmap_ = nullptr;
  }
  if (from._internal_has_getteaminfo()) {
    getteaminfo_ = new ::rustplus::AppEmpty(*from.getteaminfo_);
  } else {
    getteaminfo_ = nullptr;
  }
  if (from._internal_has_getteamchat()) {
    getteamchat_ = new ::rustplus::AppEmpty(*from.getteamchat_);
  } else {
    getteamchat_ = nullptr;
  }
  if (from._internal_has_sendteammessage()) {
    sendteammessage_ = new ::rustplus::AppSendMessage(*from.sendteammessage_);
  } else {
    sendteammessage_ = nullptr;
  }
  if (from._internal_has_getentityinfo()) {
    getentityinfo_ = new ::rustplus::AppEmpty(*from.getentityinfo_);
  } else {
    getentityinfo_ = nullptr;
  }
  if (from._internal_has_setentityvalue()) {
    setentityvalue_ = new ::rustplus::AppSetEntityValue(*from.setentityvalue_);
  } else {
    setentityvalue_ = nullptr;
  }
  if (from._internal_has_checksubscription()) {
    checksubscription_ = new ::rustplus::AppEmpty(*from.checksubscription_);
  } else {
    checksubscription_ = nullptr;
  }
  if (from._internal_has_setsubscription()) {
    setsubscription_ = new ::rustplus::AppFlag(*from.setsubscription_);
  } else {
    setsubscription_ = nullptr;
  }
  if (from._internal_has_getmapmarkers()) {
    getmapmarkers_ = new ::rustplus::AppEmpty(*from.getmapmarkers_);
  } else {
    getmapmarkers_ = nullptr;
  }
  if (from._internal_has_getcameraframe()) {
    getcameraframe_ = new ::rustplus::AppCameraFrameRequest(*from.getcameraframe_);
  } else {
    getcameraframe_ = nullptr;
  }
  if (from._internal_has_promotetoleader()) {
    promotetoleader_ = new ::rustplus::AppPromoteToLeader(*from.promotetoleader_);
  } else {
    promotetoleader_ = nullptr;
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&entityid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(entityid_));
  // @@protoc_insertion_point(copy_constructor:rustplus.AppRequest)
}

inline void AppRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&getinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entityid_) -
    reinterpret_cast<char*>(&getinfo_)) + sizeof(entityid_));
}

AppRequest::~AppRequest() {
  // @@protoc_insertion_point(destructor:rustplus.AppRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete getinfo_;
  if (this != internal_default_instance()) delete gettime_;
  if (this != internal_default_instance()) delete getmap_;
  if (this != internal_default_instance()) delete getteaminfo_;
  if (this != internal_default_instance()) delete getteamchat_;
  if (this != internal_default_instance()) delete sendteammessage_;
  if (this != internal_default_instance()) delete getentityinfo_;
  if (this != internal_default_instance()) delete setentityvalue_;
  if (this != internal_default_instance()) delete checksubscription_;
  if (this != internal_default_instance()) delete setsubscription_;
  if (this != internal_default_instance()) delete getmapmarkers_;
  if (this != internal_default_instance()) delete getcameraframe_;
  if (this != internal_default_instance()) delete promotetoleader_;
}

void AppRequest::ArenaDtor(void* object) {
  AppRequest* _this = reinterpret_cast< AppRequest* >(object);
  (void)_this;
}
void AppRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(getinfo_ != nullptr);
      getinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gettime_ != nullptr);
      gettime_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(getmap_ != nullptr);
      getmap_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(getteaminfo_ != nullptr);
      getteaminfo_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(getteamchat_ != nullptr);
      getteamchat_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(sendteammessage_ != nullptr);
      sendteammessage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(getentityinfo_ != nullptr);
      getentityinfo_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(setentityvalue_ != nullptr);
      setentityvalue_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(checksubscription_ != nullptr);
      checksubscription_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(setsubscription_ != nullptr);
      setsubscription_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(getmapmarkers_ != nullptr);
      getmapmarkers_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(getcameraframe_ != nullptr);
      getcameraframe_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(promotetoleader_ != nullptr);
      promotetoleader_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playertoken_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(playertoken_));
  }
  entityid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seq(&has_bits);
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 playerToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_playertoken(&has_bits);
          playertoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 entityId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_entityid(&has_bits);
          entityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppEmpty getInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_getinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppEmpty getTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_gettime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppEmpty getMap = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_getmap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppEmpty getTeamInfo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_getteaminfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppEmpty getTeamChat = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_getteamchat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppSendMessage sendTeamMessage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendteammessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppEmpty getEntityInfo = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_getentityinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppSetEntityValue setEntityValue = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_setentityvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppEmpty checkSubscription = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_checksubscription(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppFlag setSubscription = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_setsubscription(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppEmpty getMapMarkers = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_getmapmarkers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppCameraFrameRequest getCameraFrame = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_getcameraframe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppPromoteToLeader promoteToLeader = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_promotetoleader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 seq = 1;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seq(), target);
  }

  // required uint64 playerId = 2;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_playerid(), target);
  }

  // required int32 playerToken = 3;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_playertoken(), target);
  }

  // optional uint32 entityId = 4;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_entityid(), target);
  }

  // optional .rustplus.AppEmpty getInfo = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::getinfo(this), target, stream);
  }

  // optional .rustplus.AppEmpty getTime = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::gettime(this), target, stream);
  }

  // optional .rustplus.AppEmpty getMap = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::getmap(this), target, stream);
  }

  // optional .rustplus.AppEmpty getTeamInfo = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::getteaminfo(this), target, stream);
  }

  // optional .rustplus.AppEmpty getTeamChat = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::getteamchat(this), target, stream);
  }

  // optional .rustplus.AppSendMessage sendTeamMessage = 13;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::sendteammessage(this), target, stream);
  }

  // optional .rustplus.AppEmpty getEntityInfo = 14;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::getentityinfo(this), target, stream);
  }

  // optional .rustplus.AppSetEntityValue setEntityValue = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::setentityvalue(this), target, stream);
  }

  // optional .rustplus.AppEmpty checkSubscription = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::checksubscription(this), target, stream);
  }

  // optional .rustplus.AppFlag setSubscription = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::setsubscription(this), target, stream);
  }

  // optional .rustplus.AppEmpty getMapMarkers = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::getmapmarkers(this), target, stream);
  }

  // optional .rustplus.AppCameraFrameRequest getCameraFrame = 19;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::getcameraframe(this), target, stream);
  }

  // optional .rustplus.AppPromoteToLeader promoteToLeader = 20;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::promotetoleader(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppRequest)
  return target;
}

size_t AppRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rustplus.AppRequest)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required uint64 playerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_playerid());
  }

  if (_internal_has_seq()) {
    // required uint32 seq = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  if (_internal_has_playertoken()) {
    // required int32 playerToken = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playertoken());
  }

  return total_size;
}
size_t AppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000e000) ^ 0x0000e000) == 0) {  // All required fields are present.
    // required uint64 playerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_playerid());

    // required uint32 seq = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());

    // required int32 playerToken = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playertoken());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .rustplus.AppEmpty getInfo = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getinfo_);
    }

    // optional .rustplus.AppEmpty getTime = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gettime_);
    }

    // optional .rustplus.AppEmpty getMap = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getmap_);
    }

    // optional .rustplus.AppEmpty getTeamInfo = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getteaminfo_);
    }

    // optional .rustplus.AppEmpty getTeamChat = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getteamchat_);
    }

    // optional .rustplus.AppSendMessage sendTeamMessage = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sendteammessage_);
    }

    // optional .rustplus.AppEmpty getEntityInfo = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getentityinfo_);
    }

    // optional .rustplus.AppSetEntityValue setEntityValue = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *setentityvalue_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .rustplus.AppEmpty checkSubscription = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *checksubscription_);
    }

    // optional .rustplus.AppFlag setSubscription = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *setsubscription_);
    }

    // optional .rustplus.AppEmpty getMapMarkers = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getmapmarkers_);
    }

    // optional .rustplus.AppCameraFrameRequest getCameraFrame = 19;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *getcameraframe_);
    }

    // optional .rustplus.AppPromoteToLeader promoteToLeader = 20;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *promotetoleader_);
    }

  }
  // optional uint32 entityId = 4;
  if (cached_has_bits & 0x00010000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entityid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppRequest::GetClassData() const { return &_class_data_; }

void AppRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppRequest *>(to)->MergeFrom(
      static_cast<const AppRequest &>(from));
}


void AppRequest::MergeFrom(const AppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_getinfo()->::rustplus::AppEmpty::MergeFrom(from._internal_getinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gettime()->::rustplus::AppEmpty::MergeFrom(from._internal_gettime());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_getmap()->::rustplus::AppEmpty::MergeFrom(from._internal_getmap());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_getteaminfo()->::rustplus::AppEmpty::MergeFrom(from._internal_getteaminfo());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_getteamchat()->::rustplus::AppEmpty::MergeFrom(from._internal_getteamchat());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_sendteammessage()->::rustplus::AppSendMessage::MergeFrom(from._internal_sendteammessage());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_getentityinfo()->::rustplus::AppEmpty::MergeFrom(from._internal_getentityinfo());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_setentityvalue()->::rustplus::AppSetEntityValue::MergeFrom(from._internal_setentityvalue());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_checksubscription()->::rustplus::AppEmpty::MergeFrom(from._internal_checksubscription());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_setsubscription()->::rustplus::AppFlag::MergeFrom(from._internal_setsubscription());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_getmapmarkers()->::rustplus::AppEmpty::MergeFrom(from._internal_getmapmarkers());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_getcameraframe()->::rustplus::AppCameraFrameRequest::MergeFrom(from._internal_getcameraframe());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_promotetoleader()->::rustplus::AppPromoteToLeader::MergeFrom(from._internal_promotetoleader());
    }
    if (cached_has_bits & 0x00002000u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00004000u) {
      seq_ = from.seq_;
    }
    if (cached_has_bits & 0x00008000u) {
      playertoken_ = from.playertoken_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_entityid(from._internal_entityid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppRequest::CopyFrom(const AppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sendteammessage()) {
    if (!sendteammessage_->IsInitialized()) return false;
  }
  if (_internal_has_setentityvalue()) {
    if (!setentityvalue_->IsInitialized()) return false;
  }
  if (_internal_has_setsubscription()) {
    if (!setsubscription_->IsInitialized()) return false;
  }
  if (_internal_has_getcameraframe()) {
    if (!getcameraframe_->IsInitialized()) return false;
  }
  if (_internal_has_promotetoleader()) {
    if (!promotetoleader_->IsInitialized()) return false;
  }
  return true;
}

void AppRequest::InternalSwap(AppRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppRequest, entityid_)
      + sizeof(AppRequest::entityid_)
      - PROTOBUF_FIELD_OFFSET(AppRequest, getinfo_)>(
          reinterpret_cast<char*>(&getinfo_),
          reinterpret_cast<char*>(&other->getinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[1]);
}

// ===================================================================

class AppSendMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AppSendMessage>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AppSendMessage::AppSendMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppSendMessage)
}
AppSendMessage::AppSendMessage(const AppSendMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rustplus.AppSendMessage)
}

inline void AppSendMessage::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppSendMessage::~AppSendMessage() {
  // @@protoc_insertion_point(destructor:rustplus.AppSendMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppSendMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppSendMessage::ArenaDtor(void* object) {
  AppSendMessage* _this = reinterpret_cast< AppSendMessage* >(object);
  (void)_this;
}
void AppSendMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppSendMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppSendMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppSendMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppSendMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rustplus.AppSendMessage.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppSendMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppSendMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rustplus.AppSendMessage.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppSendMessage)
  return target;
}

size_t AppSendMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppSendMessage)
  size_t total_size = 0;

  // required string message = 1;
  if (_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppSendMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppSendMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppSendMessage::GetClassData() const { return &_class_data_; }

void AppSendMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppSendMessage *>(to)->MergeFrom(
      static_cast<const AppSendMessage &>(from));
}


void AppSendMessage::MergeFrom(const AppSendMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppSendMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppSendMessage::CopyFrom(const AppSendMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppSendMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSendMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppSendMessage::InternalSwap(AppSendMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AppSendMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[2]);
}

// ===================================================================

class AppSetEntityValue::_Internal {
 public:
  using HasBits = decltype(std::declval<AppSetEntityValue>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AppSetEntityValue::AppSetEntityValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppSetEntityValue)
}
AppSetEntityValue::AppSetEntityValue(const AppSetEntityValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:rustplus.AppSetEntityValue)
}

inline void AppSetEntityValue::SharedCtor() {
value_ = false;
}

AppSetEntityValue::~AppSetEntityValue() {
  // @@protoc_insertion_point(destructor:rustplus.AppSetEntityValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppSetEntityValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppSetEntityValue::ArenaDtor(void* object) {
  AppSetEntityValue* _this = reinterpret_cast< AppSetEntityValue* >(object);
  (void)_this;
}
void AppSetEntityValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppSetEntityValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppSetEntityValue::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppSetEntityValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppSetEntityValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppSetEntityValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppSetEntityValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppSetEntityValue)
  return target;
}

size_t AppSetEntityValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppSetEntityValue)
  size_t total_size = 0;

  // required bool value = 1;
  if (_internal_has_value()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppSetEntityValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppSetEntityValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppSetEntityValue::GetClassData() const { return &_class_data_; }

void AppSetEntityValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppSetEntityValue *>(to)->MergeFrom(
      static_cast<const AppSetEntityValue &>(from));
}


void AppSetEntityValue::MergeFrom(const AppSetEntityValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppSetEntityValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppSetEntityValue::CopyFrom(const AppSetEntityValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppSetEntityValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSetEntityValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppSetEntityValue::InternalSwap(AppSetEntityValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppSetEntityValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[3]);
}

// ===================================================================

class AppCameraFrameRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AppCameraFrameRequest>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AppCameraFrameRequest::AppCameraFrameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppCameraFrameRequest)
}
AppCameraFrameRequest::AppCameraFrameRequest(const AppCameraFrameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArenaForAllocation());
  }
  frame_ = from.frame_;
  // @@protoc_insertion_point(copy_constructor:rustplus.AppCameraFrameRequest)
}

inline void AppCameraFrameRequest::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
frame_ = 0u;
}

AppCameraFrameRequest::~AppCameraFrameRequest() {
  // @@protoc_insertion_point(destructor:rustplus.AppCameraFrameRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppCameraFrameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppCameraFrameRequest::ArenaDtor(void* object) {
  AppCameraFrameRequest* _this = reinterpret_cast< AppCameraFrameRequest* >(object);
  (void)_this;
}
void AppCameraFrameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppCameraFrameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppCameraFrameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppCameraFrameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    identifier_.ClearNonDefaultToEmpty();
  }
  frame_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppCameraFrameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rustplus.AppCameraFrameRequest.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_frame(&has_bits);
          frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppCameraFrameRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppCameraFrameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rustplus.AppCameraFrameRequest.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // required uint32 frame = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppCameraFrameRequest)
  return target;
}

size_t AppCameraFrameRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rustplus.AppCameraFrameRequest)
  size_t total_size = 0;

  if (_internal_has_identifier()) {
    // required string identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  if (_internal_has_frame()) {
    // required uint32 frame = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame());
  }

  return total_size;
}
size_t AppCameraFrameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppCameraFrameRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());

    // required uint32 frame = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppCameraFrameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppCameraFrameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppCameraFrameRequest::GetClassData() const { return &_class_data_; }

void AppCameraFrameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppCameraFrameRequest *>(to)->MergeFrom(
      static_cast<const AppCameraFrameRequest &>(from));
}


void AppCameraFrameRequest::MergeFrom(const AppCameraFrameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppCameraFrameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      frame_ = from.frame_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppCameraFrameRequest::CopyFrom(const AppCameraFrameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppCameraFrameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppCameraFrameRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppCameraFrameRequest::InternalSwap(AppCameraFrameRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identifier_, GetArenaForAllocation(),
      &other->identifier_, other->GetArenaForAllocation()
  );
  swap(frame_, other->frame_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppCameraFrameRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[4]);
}

// ===================================================================

class AppPromoteToLeader::_Internal {
 public:
  using HasBits = decltype(std::declval<AppPromoteToLeader>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AppPromoteToLeader::AppPromoteToLeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppPromoteToLeader)
}
AppPromoteToLeader::AppPromoteToLeader(const AppPromoteToLeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:rustplus.AppPromoteToLeader)
}

inline void AppPromoteToLeader::SharedCtor() {
steamid_ = uint64_t{0u};
}

AppPromoteToLeader::~AppPromoteToLeader() {
  // @@protoc_insertion_point(destructor:rustplus.AppPromoteToLeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppPromoteToLeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppPromoteToLeader::ArenaDtor(void* object) {
  AppPromoteToLeader* _this = reinterpret_cast< AppPromoteToLeader* >(object);
  (void)_this;
}
void AppPromoteToLeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppPromoteToLeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppPromoteToLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppPromoteToLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppPromoteToLeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 steamId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppPromoteToLeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppPromoteToLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 steamId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppPromoteToLeader)
  return target;
}

size_t AppPromoteToLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppPromoteToLeader)
  size_t total_size = 0;

  // required uint64 steamId = 1;
  if (_internal_has_steamid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_steamid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppPromoteToLeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppPromoteToLeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppPromoteToLeader::GetClassData() const { return &_class_data_; }

void AppPromoteToLeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppPromoteToLeader *>(to)->MergeFrom(
      static_cast<const AppPromoteToLeader &>(from));
}


void AppPromoteToLeader::MergeFrom(const AppPromoteToLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppPromoteToLeader)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppPromoteToLeader::CopyFrom(const AppPromoteToLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppPromoteToLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppPromoteToLeader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppPromoteToLeader::InternalSwap(AppPromoteToLeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppPromoteToLeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[5]);
}

// ===================================================================

class AppResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AppResponse>()._has_bits_);
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::rustplus::AppSuccess& success(const AppResponse* msg);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::rustplus::AppError& error(const AppResponse* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::rustplus::AppInfo& info(const AppResponse* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::rustplus::AppTime& time(const AppResponse* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::rustplus::AppMap& map(const AppResponse* msg);
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::rustplus::AppTeamInfo& teaminfo(const AppResponse* msg);
  static void set_has_teaminfo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::rustplus::AppTeamChat& teamchat(const AppResponse* msg);
  static void set_has_teamchat(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::rustplus::AppEntityInfo& entityinfo(const AppResponse* msg);
  static void set_has_entityinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::rustplus::AppFlag& flag(const AppResponse* msg);
  static void set_has_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::rustplus::AppMapMarkers& mapmarkers(const AppResponse* msg);
  static void set_has_mapmarkers(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::rustplus::AppCameraFrame& cameraframe(const AppResponse* msg);
  static void set_has_cameraframe(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000800) ^ 0x00000800) != 0;
  }
};

const ::rustplus::AppSuccess&
AppResponse::_Internal::success(const AppResponse* msg) {
  return *msg->success_;
}
const ::rustplus::AppError&
AppResponse::_Internal::error(const AppResponse* msg) {
  return *msg->error_;
}
const ::rustplus::AppInfo&
AppResponse::_Internal::info(const AppResponse* msg) {
  return *msg->info_;
}
const ::rustplus::AppTime&
AppResponse::_Internal::time(const AppResponse* msg) {
  return *msg->time_;
}
const ::rustplus::AppMap&
AppResponse::_Internal::map(const AppResponse* msg) {
  return *msg->map_;
}
const ::rustplus::AppTeamInfo&
AppResponse::_Internal::teaminfo(const AppResponse* msg) {
  return *msg->teaminfo_;
}
const ::rustplus::AppTeamChat&
AppResponse::_Internal::teamchat(const AppResponse* msg) {
  return *msg->teamchat_;
}
const ::rustplus::AppEntityInfo&
AppResponse::_Internal::entityinfo(const AppResponse* msg) {
  return *msg->entityinfo_;
}
const ::rustplus::AppFlag&
AppResponse::_Internal::flag(const AppResponse* msg) {
  return *msg->flag_;
}
const ::rustplus::AppMapMarkers&
AppResponse::_Internal::mapmarkers(const AppResponse* msg) {
  return *msg->mapmarkers_;
}
const ::rustplus::AppCameraFrame&
AppResponse::_Internal::cameraframe(const AppResponse* msg) {
  return *msg->cameraframe_;
}
AppResponse::AppResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppResponse)
}
AppResponse::AppResponse(const AppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_success()) {
    success_ = new ::rustplus::AppSuccess(*from.success_);
  } else {
    success_ = nullptr;
  }
  if (from._internal_has_error()) {
    error_ = new ::rustplus::AppError(*from.error_);
  } else {
    error_ = nullptr;
  }
  if (from._internal_has_info()) {
    info_ = new ::rustplus::AppInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_time()) {
    time_ = new ::rustplus::AppTime(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_map()) {
    map_ = new ::rustplus::AppMap(*from.map_);
  } else {
    map_ = nullptr;
  }
  if (from._internal_has_teaminfo()) {
    teaminfo_ = new ::rustplus::AppTeamInfo(*from.teaminfo_);
  } else {
    teaminfo_ = nullptr;
  }
  if (from._internal_has_teamchat()) {
    teamchat_ = new ::rustplus::AppTeamChat(*from.teamchat_);
  } else {
    teamchat_ = nullptr;
  }
  if (from._internal_has_entityinfo()) {
    entityinfo_ = new ::rustplus::AppEntityInfo(*from.entityinfo_);
  } else {
    entityinfo_ = nullptr;
  }
  if (from._internal_has_flag()) {
    flag_ = new ::rustplus::AppFlag(*from.flag_);
  } else {
    flag_ = nullptr;
  }
  if (from._internal_has_mapmarkers()) {
    mapmarkers_ = new ::rustplus::AppMapMarkers(*from.mapmarkers_);
  } else {
    mapmarkers_ = nullptr;
  }
  if (from._internal_has_cameraframe()) {
    cameraframe_ = new ::rustplus::AppCameraFrame(*from.cameraframe_);
  } else {
    cameraframe_ = nullptr;
  }
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:rustplus.AppResponse)
}

inline void AppResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&success_)) + sizeof(seq_));
}

AppResponse::~AppResponse() {
  // @@protoc_insertion_point(destructor:rustplus.AppResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete success_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete map_;
  if (this != internal_default_instance()) delete teaminfo_;
  if (this != internal_default_instance()) delete teamchat_;
  if (this != internal_default_instance()) delete entityinfo_;
  if (this != internal_default_instance()) delete flag_;
  if (this != internal_default_instance()) delete mapmarkers_;
  if (this != internal_default_instance()) delete cameraframe_;
}

void AppResponse::ArenaDtor(void* object) {
  AppResponse* _this = reinterpret_cast< AppResponse* >(object);
  (void)_this;
}
void AppResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(success_ != nullptr);
      success_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(error_ != nullptr);
      error_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(time_ != nullptr);
      time_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(map_ != nullptr);
      map_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(teaminfo_ != nullptr);
      teaminfo_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(teamchat_ != nullptr);
      teamchat_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(entityinfo_ != nullptr);
      entityinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(flag_ != nullptr);
      flag_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(mapmarkers_ != nullptr);
      mapmarkers_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(cameraframe_ != nullptr);
      cameraframe_->Clear();
    }
  }
  seq_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seq(&has_bits);
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppSuccess success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_success(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppError error = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppInfo info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppTime time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppMap map = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppTeamInfo teamInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_teaminfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppTeamChat teamChat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamchat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppEntityInfo entityInfo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_entityinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppFlag flag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_flag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppMapMarkers mapMarkers = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapmarkers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppCameraFrame cameraFrame = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_cameraframe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 seq = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seq(), target);
  }

  // optional .rustplus.AppSuccess success = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::success(this), target, stream);
  }

  // optional .rustplus.AppError error = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::error(this), target, stream);
  }

  // optional .rustplus.AppInfo info = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::info(this), target, stream);
  }

  // optional .rustplus.AppTime time = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::time(this), target, stream);
  }

  // optional .rustplus.AppMap map = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::map(this), target, stream);
  }

  // optional .rustplus.AppTeamInfo teamInfo = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::teaminfo(this), target, stream);
  }

  // optional .rustplus.AppTeamChat teamChat = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::teamchat(this), target, stream);
  }

  // optional .rustplus.AppEntityInfo entityInfo = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::entityinfo(this), target, stream);
  }

  // optional .rustplus.AppFlag flag = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::flag(this), target, stream);
  }

  // optional .rustplus.AppMapMarkers mapMarkers = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::mapmarkers(this), target, stream);
  }

  // optional .rustplus.AppCameraFrame cameraFrame = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::cameraframe(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppResponse)
  return target;
}

size_t AppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppResponse)
  size_t total_size = 0;

  // required uint32 seq = 1;
  if (_internal_has_seq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .rustplus.AppSuccess success = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *success_);
    }

    // optional .rustplus.AppError error = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *error_);
    }

    // optional .rustplus.AppInfo info = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional .rustplus.AppTime time = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_);
    }

    // optional .rustplus.AppMap map = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *map_);
    }

    // optional .rustplus.AppTeamInfo teamInfo = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *teaminfo_);
    }

    // optional .rustplus.AppTeamChat teamChat = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *teamchat_);
    }

    // optional .rustplus.AppEntityInfo entityInfo = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entityinfo_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .rustplus.AppFlag flag = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *flag_);
    }

    // optional .rustplus.AppMapMarkers mapMarkers = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mapmarkers_);
    }

    // optional .rustplus.AppCameraFrame cameraFrame = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cameraframe_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppResponse::GetClassData() const { return &_class_data_; }

void AppResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppResponse *>(to)->MergeFrom(
      static_cast<const AppResponse &>(from));
}


void AppResponse::MergeFrom(const AppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_success()->::rustplus::AppSuccess::MergeFrom(from._internal_success());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_error()->::rustplus::AppError::MergeFrom(from._internal_error());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_info()->::rustplus::AppInfo::MergeFrom(from._internal_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_time()->::rustplus::AppTime::MergeFrom(from._internal_time());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_map()->::rustplus::AppMap::MergeFrom(from._internal_map());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_teaminfo()->::rustplus::AppTeamInfo::MergeFrom(from._internal_teaminfo());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_teamchat()->::rustplus::AppTeamChat::MergeFrom(from._internal_teamchat());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_entityinfo()->::rustplus::AppEntityInfo::MergeFrom(from._internal_entityinfo());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_flag()->::rustplus::AppFlag::MergeFrom(from._internal_flag());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_mapmarkers()->::rustplus::AppMapMarkers::MergeFrom(from._internal_mapmarkers());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_cameraframe()->::rustplus::AppCameraFrame::MergeFrom(from._internal_cameraframe());
    }
    if (cached_has_bits & 0x00000800u) {
      seq_ = from.seq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppResponse::CopyFrom(const AppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_error()) {
    if (!error_->IsInitialized()) return false;
  }
  if (_internal_has_info()) {
    if (!info_->IsInitialized()) return false;
  }
  if (_internal_has_time()) {
    if (!time_->IsInitialized()) return false;
  }
  if (_internal_has_map()) {
    if (!map_->IsInitialized()) return false;
  }
  if (_internal_has_teaminfo()) {
    if (!teaminfo_->IsInitialized()) return false;
  }
  if (_internal_has_teamchat()) {
    if (!teamchat_->IsInitialized()) return false;
  }
  if (_internal_has_entityinfo()) {
    if (!entityinfo_->IsInitialized()) return false;
  }
  if (_internal_has_flag()) {
    if (!flag_->IsInitialized()) return false;
  }
  if (_internal_has_mapmarkers()) {
    if (!mapmarkers_->IsInitialized()) return false;
  }
  if (_internal_has_cameraframe()) {
    if (!cameraframe_->IsInitialized()) return false;
  }
  return true;
}

void AppResponse::InternalSwap(AppResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppResponse, seq_)
      + sizeof(AppResponse::seq_)
      - PROTOBUF_FIELD_OFFSET(AppResponse, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[6]);
}

// ===================================================================

class AppBroadcast::_Internal {
 public:
  using HasBits = decltype(std::declval<AppBroadcast>()._has_bits_);
  static const ::rustplus::AppTeamChanged& teamchanged(const AppBroadcast* msg);
  static void set_has_teamchanged(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::rustplus::AppTeamMessage& teammessage(const AppBroadcast* msg);
  static void set_has_teammessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::rustplus::AppEntityChanged& entitychanged(const AppBroadcast* msg);
  static void set_has_entitychanged(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::rustplus::AppTeamChanged&
AppBroadcast::_Internal::teamchanged(const AppBroadcast* msg) {
  return *msg->teamchanged_;
}
const ::rustplus::AppTeamMessage&
AppBroadcast::_Internal::teammessage(const AppBroadcast* msg) {
  return *msg->teammessage_;
}
const ::rustplus::AppEntityChanged&
AppBroadcast::_Internal::entitychanged(const AppBroadcast* msg) {
  return *msg->entitychanged_;
}
AppBroadcast::AppBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppBroadcast)
}
AppBroadcast::AppBroadcast(const AppBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_teamchanged()) {
    teamchanged_ = new ::rustplus::AppTeamChanged(*from.teamchanged_);
  } else {
    teamchanged_ = nullptr;
  }
  if (from._internal_has_teammessage()) {
    teammessage_ = new ::rustplus::AppTeamMessage(*from.teammessage_);
  } else {
    teammessage_ = nullptr;
  }
  if (from._internal_has_entitychanged()) {
    entitychanged_ = new ::rustplus::AppEntityChanged(*from.entitychanged_);
  } else {
    entitychanged_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rustplus.AppBroadcast)
}

inline void AppBroadcast::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&teamchanged_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entitychanged_) -
    reinterpret_cast<char*>(&teamchanged_)) + sizeof(entitychanged_));
}

AppBroadcast::~AppBroadcast() {
  // @@protoc_insertion_point(destructor:rustplus.AppBroadcast)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppBroadcast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete teamchanged_;
  if (this != internal_default_instance()) delete teammessage_;
  if (this != internal_default_instance()) delete entitychanged_;
}

void AppBroadcast::ArenaDtor(void* object) {
  AppBroadcast* _this = reinterpret_cast< AppBroadcast* >(object);
  (void)_this;
}
void AppBroadcast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(teamchanged_ != nullptr);
      teamchanged_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(teammessage_ != nullptr);
      teammessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(entitychanged_ != nullptr);
      entitychanged_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .rustplus.AppTeamChanged teamChanged = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamchanged(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppTeamMessage teamMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_teammessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.AppEntityChanged entityChanged = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_entitychanged(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppBroadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .rustplus.AppTeamChanged teamChanged = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::teamchanged(this), target, stream);
  }

  // optional .rustplus.AppTeamMessage teamMessage = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::teammessage(this), target, stream);
  }

  // optional .rustplus.AppEntityChanged entityChanged = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::entitychanged(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppBroadcast)
  return target;
}

size_t AppBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .rustplus.AppTeamChanged teamChanged = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *teamchanged_);
    }

    // optional .rustplus.AppTeamMessage teamMessage = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *teammessage_);
    }

    // optional .rustplus.AppEntityChanged entityChanged = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entitychanged_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppBroadcast::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppBroadcast::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppBroadcast::GetClassData() const { return &_class_data_; }

void AppBroadcast::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppBroadcast *>(to)->MergeFrom(
      static_cast<const AppBroadcast &>(from));
}


void AppBroadcast::MergeFrom(const AppBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_teamchanged()->::rustplus::AppTeamChanged::MergeFrom(from._internal_teamchanged());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_teammessage()->::rustplus::AppTeamMessage::MergeFrom(from._internal_teammessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_entitychanged()->::rustplus::AppEntityChanged::MergeFrom(from._internal_entitychanged());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppBroadcast::CopyFrom(const AppBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppBroadcast::IsInitialized() const {
  if (_internal_has_teamchanged()) {
    if (!teamchanged_->IsInitialized()) return false;
  }
  if (_internal_has_teammessage()) {
    if (!teammessage_->IsInitialized()) return false;
  }
  if (_internal_has_entitychanged()) {
    if (!entitychanged_->IsInitialized()) return false;
  }
  return true;
}

void AppBroadcast::InternalSwap(AppBroadcast* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppBroadcast, entitychanged_)
      + sizeof(AppBroadcast::entitychanged_)
      - PROTOBUF_FIELD_OFFSET(AppBroadcast, teamchanged_)>(
          reinterpret_cast<char*>(&teamchanged_),
          reinterpret_cast<char*>(&other->teamchanged_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppBroadcast::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[7]);
}

// ===================================================================

class AppEmpty::_Internal {
 public:
};

AppEmpty::AppEmpty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppEmpty)
}
AppEmpty::AppEmpty(const AppEmpty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rustplus.AppEmpty)
}

inline void AppEmpty::SharedCtor() {
}

AppEmpty::~AppEmpty() {
  // @@protoc_insertion_point(destructor:rustplus.AppEmpty)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppEmpty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppEmpty::ArenaDtor(void* object) {
  AppEmpty* _this = reinterpret_cast< AppEmpty* >(object);
  (void)_this;
}
void AppEmpty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppEmpty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppEmpty::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppEmpty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppEmpty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppEmpty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppEmpty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppEmpty)
  return target;
}

size_t AppEmpty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppEmpty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppEmpty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppEmpty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppEmpty::GetClassData() const { return &_class_data_; }

void AppEmpty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppEmpty *>(to)->MergeFrom(
      static_cast<const AppEmpty &>(from));
}


void AppEmpty::MergeFrom(const AppEmpty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppEmpty)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppEmpty::CopyFrom(const AppEmpty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppEmpty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppEmpty::IsInitialized() const {
  return true;
}

void AppEmpty::InternalSwap(AppEmpty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppEmpty::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[8]);
}

// ===================================================================

class AppSuccess::_Internal {
 public:
};

AppSuccess::AppSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppSuccess)
}
AppSuccess::AppSuccess(const AppSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rustplus.AppSuccess)
}

inline void AppSuccess::SharedCtor() {
}

AppSuccess::~AppSuccess() {
  // @@protoc_insertion_point(destructor:rustplus.AppSuccess)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppSuccess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppSuccess::ArenaDtor(void* object) {
  AppSuccess* _this = reinterpret_cast< AppSuccess* >(object);
  (void)_this;
}
void AppSuccess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppSuccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppSuccess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppSuccess)
  return target;
}

size_t AppSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppSuccess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppSuccess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppSuccess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppSuccess::GetClassData() const { return &_class_data_; }

void AppSuccess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppSuccess *>(to)->MergeFrom(
      static_cast<const AppSuccess &>(from));
}


void AppSuccess::MergeFrom(const AppSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppSuccess::CopyFrom(const AppSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSuccess::IsInitialized() const {
  return true;
}

void AppSuccess::InternalSwap(AppSuccess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppSuccess::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[9]);
}

// ===================================================================

class AppError::_Internal {
 public:
  using HasBits = decltype(std::declval<AppError>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AppError::AppError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppError)
}
AppError::AppError(const AppError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rustplus.AppError)
}

inline void AppError::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppError::~AppError() {
  // @@protoc_insertion_point(destructor:rustplus.AppError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppError::ArenaDtor(void* object) {
  AppError* _this = reinterpret_cast< AppError* >(object);
  (void)_this;
}
void AppError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppError::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rustplus.AppError.error");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rustplus.AppError.error");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppError)
  return target;
}

size_t AppError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppError)
  size_t total_size = 0;

  // required string error = 1;
  if (_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppError::GetClassData() const { return &_class_data_; }

void AppError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppError *>(to)->MergeFrom(
      static_cast<const AppError &>(from));
}


void AppError::MergeFrom(const AppError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppError::CopyFrom(const AppError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppError::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppError::InternalSwap(AppError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AppError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[10]);
}

// ===================================================================

class AppInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AppInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_headerimage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mapsize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wipetime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_players(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_maxplayers(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_queuedplayers(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ff) ^ 0x000001ff) != 0;
  }
};

AppInfo::AppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppInfo)
}
AppInfo::AppInfo(const AppInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  headerimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_headerimage()) {
    headerimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_headerimage(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map()) {
    map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mapsize_, &from.mapsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&salt_) -
    reinterpret_cast<char*>(&mapsize_)) + sizeof(salt_));
  // @@protoc_insertion_point(copy_constructor:rustplus.AppInfo)
}

inline void AppInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
headerimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mapsize_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&salt_) -
    reinterpret_cast<char*>(&mapsize_)) + sizeof(salt_));
}

AppInfo::~AppInfo() {
  // @@protoc_insertion_point(destructor:rustplus.AppInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headerimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppInfo::ArenaDtor(void* object) {
  AppInfo* _this = reinterpret_cast< AppInfo* >(object);
  (void)_this;
}
void AppInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      headerimage_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      map_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&mapsize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxplayers_) -
        reinterpret_cast<char*>(&mapsize_)) + sizeof(maxplayers_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&queuedplayers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&salt_) -
        reinterpret_cast<char*>(&queuedplayers_)) + sizeof(salt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rustplus.AppInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string headerImage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_headerimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rustplus.AppInfo.headerImage");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rustplus.AppInfo.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rustplus.AppInfo.map");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mapSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mapsize(&has_bits);
          mapsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 wipeTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_wipetime(&has_bits);
          wipetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 players = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_players(&has_bits);
          players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 maxPlayers = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_maxplayers(&has_bits);
          maxplayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 queuedPlayers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_queuedplayers(&has_bits);
          queuedplayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_seed(&has_bits);
          seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 salt = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_salt(&has_bits);
          salt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rustplus.AppInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string headerImage = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_headerimage().data(), static_cast<int>(this->_internal_headerimage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rustplus.AppInfo.headerImage");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_headerimage(), target);
  }

  // required string url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rustplus.AppInfo.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // required string map = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rustplus.AppInfo.map");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_map(), target);
  }

  // required uint32 mapSize = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_mapsize(), target);
  }

  // required uint32 wipeTime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_wipetime(), target);
  }

  // required uint32 players = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_players(), target);
  }

  // required uint32 maxPlayers = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_maxplayers(), target);
  }

  // required uint32 queuedPlayers = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_queuedplayers(), target);
  }

  // optional uint32 seed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_seed(), target);
  }

  // optional uint32 salt = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_salt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppInfo)
  return target;
}

size_t AppInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rustplus.AppInfo)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_headerimage()) {
    // required string headerImage = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headerimage());
  }

  if (_internal_has_url()) {
    // required string url = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (_internal_has_map()) {
    // required string map = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map());
  }

  if (_internal_has_mapsize()) {
    // required uint32 mapSize = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapsize());
  }

  if (_internal_has_wipetime()) {
    // required uint32 wipeTime = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wipetime());
  }

  if (_internal_has_players()) {
    // required uint32 players = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_players());
  }

  if (_internal_has_maxplayers()) {
    // required uint32 maxPlayers = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxplayers());
  }

  if (_internal_has_queuedplayers()) {
    // required uint32 queuedPlayers = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_queuedplayers());
  }

  return total_size;
}
size_t AppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string headerImage = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headerimage());

    // required string url = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());

    // required string map = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map());

    // required uint32 mapSize = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapsize());

    // required uint32 wipeTime = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wipetime());

    // required uint32 players = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_players());

    // required uint32 maxPlayers = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxplayers());

    // required uint32 queuedPlayers = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_queuedplayers());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000600u) {
    // optional uint32 seed = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seed());
    }

    // optional uint32 salt = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_salt());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppInfo::GetClassData() const { return &_class_data_; }

void AppInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppInfo *>(to)->MergeFrom(
      static_cast<const AppInfo &>(from));
}


void AppInfo::MergeFrom(const AppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_headerimage(from._internal_headerimage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_map(from._internal_map());
    }
    if (cached_has_bits & 0x00000010u) {
      mapsize_ = from.mapsize_;
    }
    if (cached_has_bits & 0x00000020u) {
      wipetime_ = from.wipetime_;
    }
    if (cached_has_bits & 0x00000040u) {
      players_ = from.players_;
    }
    if (cached_has_bits & 0x00000080u) {
      maxplayers_ = from.maxplayers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      queuedplayers_ = from.queuedplayers_;
    }
    if (cached_has_bits & 0x00000200u) {
      seed_ = from.seed_;
    }
    if (cached_has_bits & 0x00000400u) {
      salt_ = from.salt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppInfo::CopyFrom(const AppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppInfo::InternalSwap(AppInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &headerimage_, GetArenaForAllocation(),
      &other->headerimage_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, GetArenaForAllocation(),
      &other->url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &map_, GetArenaForAllocation(),
      &other->map_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppInfo, salt_)
      + sizeof(AppInfo::salt_)
      - PROTOBUF_FIELD_OFFSET(AppInfo, mapsize_)>(
          reinterpret_cast<char*>(&mapsize_),
          reinterpret_cast<char*>(&other->mapsize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[11]);
}

// ===================================================================

class AppTime::_Internal {
 public:
  using HasBits = decltype(std::declval<AppTime>()._has_bits_);
  static void set_has_daylengthminutes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timescale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sunrise(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sunset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

AppTime::AppTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppTime)
}
AppTime::AppTime(const AppTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&daylengthminutes_, &from.daylengthminutes_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&daylengthminutes_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:rustplus.AppTime)
}

inline void AppTime::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&daylengthminutes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&daylengthminutes_)) + sizeof(time_));
}

AppTime::~AppTime() {
  // @@protoc_insertion_point(destructor:rustplus.AppTime)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppTime::ArenaDtor(void* object) {
  AppTime* _this = reinterpret_cast< AppTime* >(object);
  (void)_this;
}
void AppTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppTime::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&daylengthminutes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&daylengthminutes_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float dayLengthMinutes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_daylengthminutes(&has_bits);
          daylengthminutes_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float timeScale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_timescale(&has_bits);
          timescale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float sunrise = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_sunrise(&has_bits);
          sunrise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float sunset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_sunset(&has_bits);
          sunset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float dayLengthMinutes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_daylengthminutes(), target);
  }

  // required float timeScale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_timescale(), target);
  }

  // required float sunrise = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_sunrise(), target);
  }

  // required float sunset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_sunset(), target);
  }

  // required float time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppTime)
  return target;
}

size_t AppTime::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rustplus.AppTime)
  size_t total_size = 0;

  if (_internal_has_daylengthminutes()) {
    // required float dayLengthMinutes = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_timescale()) {
    // required float timeScale = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_sunrise()) {
    // required float sunrise = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_sunset()) {
    // required float sunset = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_time()) {
    // required float time = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t AppTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppTime)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required float dayLengthMinutes = 1;
    total_size += 1 + 4;

    // required float timeScale = 2;
    total_size += 1 + 4;

    // required float sunrise = 3;
    total_size += 1 + 4;

    // required float sunset = 4;
    total_size += 1 + 4;

    // required float time = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppTime::GetClassData() const { return &_class_data_; }

void AppTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppTime *>(to)->MergeFrom(
      static_cast<const AppTime &>(from));
}


void AppTime::MergeFrom(const AppTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppTime)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      daylengthminutes_ = from.daylengthminutes_;
    }
    if (cached_has_bits & 0x00000002u) {
      timescale_ = from.timescale_;
    }
    if (cached_has_bits & 0x00000004u) {
      sunrise_ = from.sunrise_;
    }
    if (cached_has_bits & 0x00000008u) {
      sunset_ = from.sunset_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppTime::CopyFrom(const AppTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppTime::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppTime::InternalSwap(AppTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppTime, time_)
      + sizeof(AppTime::time_)
      - PROTOBUF_FIELD_OFFSET(AppTime, daylengthminutes_)>(
          reinterpret_cast<char*>(&daylengthminutes_),
          reinterpret_cast<char*>(&other->daylengthminutes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppTime::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[12]);
}

// ===================================================================

class AppMap_Monument::_Internal {
 public:
  using HasBits = decltype(std::declval<AppMap_Monument>()._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AppMap_Monument::AppMap_Monument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppMap.Monument)
}
AppMap_Monument::AppMap_Monument(const AppMap_Monument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_token()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:rustplus.AppMap.Monument)
}

inline void AppMap_Monument::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

AppMap_Monument::~AppMap_Monument() {
  // @@protoc_insertion_point(destructor:rustplus.AppMap.Monument)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppMap_Monument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppMap_Monument::ArenaDtor(void* object) {
  AppMap_Monument* _this = reinterpret_cast< AppMap_Monument* >(object);
  (void)_this;
}
void AppMap_Monument::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppMap_Monument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppMap_Monument::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppMap.Monument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppMap_Monument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rustplus.AppMap.Monument.token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMap_Monument::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppMap.Monument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rustplus.AppMap.Monument.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // required float x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // required float y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppMap.Monument)
  return target;
}

size_t AppMap_Monument::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rustplus.AppMap.Monument)
  size_t total_size = 0;

  if (_internal_has_token()) {
    // required string token = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (_internal_has_x()) {
    // required float x = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t AppMap_Monument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppMap.Monument)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string token = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required float x = 2;
    total_size += 1 + 4;

    // required float y = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppMap_Monument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppMap_Monument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppMap_Monument::GetClassData() const { return &_class_data_; }

void AppMap_Monument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppMap_Monument *>(to)->MergeFrom(
      static_cast<const AppMap_Monument &>(from));
}


void AppMap_Monument::MergeFrom(const AppMap_Monument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppMap.Monument)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppMap_Monument::CopyFrom(const AppMap_Monument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppMap.Monument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMap_Monument::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppMap_Monument::InternalSwap(AppMap_Monument* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, GetArenaForAllocation(),
      &other->token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppMap_Monument, y_)
      + sizeof(AppMap_Monument::y_)
      - PROTOBUF_FIELD_OFFSET(AppMap_Monument, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMap_Monument::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[13]);
}

// ===================================================================

class AppMap::_Internal {
 public:
  using HasBits = decltype(std::declval<AppMap>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_jpgimage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_oceanmargin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001d) ^ 0x0000001d) != 0;
  }
};

AppMap::AppMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  monuments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppMap)
}
AppMap::AppMap(const AppMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      monuments_(from.monuments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  jpgimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_jpgimage()) {
    jpgimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_jpgimage(), 
      GetArenaForAllocation());
  }
  background_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_background()) {
    background_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_background(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&oceanmargin_) -
    reinterpret_cast<char*>(&width_)) + sizeof(oceanmargin_));
  // @@protoc_insertion_point(copy_constructor:rustplus.AppMap)
}

inline void AppMap::SharedCtor() {
jpgimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
background_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oceanmargin_) -
    reinterpret_cast<char*>(&width_)) + sizeof(oceanmargin_));
}

AppMap::~AppMap() {
  // @@protoc_insertion_point(destructor:rustplus.AppMap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  jpgimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  background_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppMap::ArenaDtor(void* object) {
  AppMap* _this = reinterpret_cast< AppMap* >(object);
  (void)_this;
}
void AppMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppMap::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monuments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      jpgimage_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      background_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&oceanmargin_) -
        reinterpret_cast<char*>(&width_)) + sizeof(oceanmargin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes jpgImage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_jpgimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 oceanMargin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_oceanmargin(&has_bits);
          oceanmargin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .rustplus.AppMap.Monument monuments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_monuments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string background = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_background();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rustplus.AppMap.background");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 width = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // required bytes jpgImage = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_jpgimage(), target);
  }

  // required int32 oceanMargin = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_oceanmargin(), target);
  }

  // repeated .rustplus.AppMap.Monument monuments = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_monuments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_monuments(i), target, stream);
  }

  // optional string background = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_background().data(), static_cast<int>(this->_internal_background().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rustplus.AppMap.background");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_background(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppMap)
  return target;
}

size_t AppMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rustplus.AppMap)
  size_t total_size = 0;

  if (_internal_has_jpgimage()) {
    // required bytes jpgImage = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_jpgimage());
  }

  if (_internal_has_width()) {
    // required uint32 width = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  if (_internal_has_height()) {
    // required uint32 height = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (_internal_has_oceanmargin()) {
    // required int32 oceanMargin = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oceanmargin());
  }

  return total_size;
}
size_t AppMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppMap)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required bytes jpgImage = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_jpgimage());

    // required uint32 width = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());

    // required uint32 height = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());

    // required int32 oceanMargin = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oceanmargin());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rustplus.AppMap.Monument monuments = 5;
  total_size += 1UL * this->_internal_monuments_size();
  for (const auto& msg : this->monuments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string background = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_background());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppMap::GetClassData() const { return &_class_data_; }

void AppMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppMap *>(to)->MergeFrom(
      static_cast<const AppMap &>(from));
}


void AppMap::MergeFrom(const AppMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppMap)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  monuments_.MergeFrom(from.monuments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_jpgimage(from._internal_jpgimage());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_background(from._internal_background());
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      oceanmargin_ = from.oceanmargin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppMap::CopyFrom(const AppMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMap::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(monuments_)) return false;
  return true;
}

void AppMap::InternalSwap(AppMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  monuments_.InternalSwap(&other->monuments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &jpgimage_, GetArenaForAllocation(),
      &other->jpgimage_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &background_, GetArenaForAllocation(),
      &other->background_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppMap, oceanmargin_)
      + sizeof(AppMap::oceanmargin_)
      - PROTOBUF_FIELD_OFFSET(AppMap, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[14]);
}

// ===================================================================

class AppTeamInfo_Member::_Internal {
 public:
  using HasBits = decltype(std::declval<AppTeamInfo_Member>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_isonline(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_spawntime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isalive(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_deathtime(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

AppTeamInfo_Member::AppTeamInfo_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppTeamInfo.Member)
}
AppTeamInfo_Member::AppTeamInfo_Member(const AppTeamInfo_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&deathtime_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(deathtime_));
  // @@protoc_insertion_point(copy_constructor:rustplus.AppTeamInfo.Member)
}

inline void AppTeamInfo_Member::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deathtime_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(deathtime_));
}

AppTeamInfo_Member::~AppTeamInfo_Member() {
  // @@protoc_insertion_point(destructor:rustplus.AppTeamInfo.Member)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppTeamInfo_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppTeamInfo_Member::ArenaDtor(void* object) {
  AppTeamInfo_Member* _this = reinterpret_cast< AppTeamInfo_Member* >(object);
  (void)_this;
}
void AppTeamInfo_Member::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppTeamInfo_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppTeamInfo_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppTeamInfo.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deathtime_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(deathtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppTeamInfo_Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 steamId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rustplus.AppTeamInfo.Member.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool isOnline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_isonline(&has_bits);
          isonline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 spawnTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_spawntime(&has_bits);
          spawntime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool isAlive = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_isalive(&has_bits);
          isalive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 deathTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_deathtime(&has_bits);
          deathtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppTeamInfo_Member::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppTeamInfo.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 steamId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steamid(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rustplus.AppTeamInfo.Member.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // required bool isOnline = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_isonline(), target);
  }

  // required uint32 spawnTime = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_spawntime(), target);
  }

  // required bool isAlive = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_isalive(), target);
  }

  // required uint32 deathTime = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_deathtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppTeamInfo.Member)
  return target;
}

size_t AppTeamInfo_Member::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rustplus.AppTeamInfo.Member)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_steamid()) {
    // required uint64 steamId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_steamid());
  }

  if (_internal_has_x()) {
    // required float x = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_spawntime()) {
    // required uint32 spawnTime = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_spawntime());
  }

  if (_internal_has_isonline()) {
    // required bool isOnline = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_isalive()) {
    // required bool isAlive = 7;
    total_size += 1 + 1;
  }

  if (_internal_has_deathtime()) {
    // required uint32 deathTime = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deathtime());
  }

  return total_size;
}
size_t AppTeamInfo_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppTeamInfo.Member)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint64 steamId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_steamid());

    // required float x = 3;
    total_size += 1 + 4;

    // required float y = 4;
    total_size += 1 + 4;

    // required uint32 spawnTime = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_spawntime());

    // required bool isOnline = 5;
    total_size += 1 + 1;

    // required bool isAlive = 7;
    total_size += 1 + 1;

    // required uint32 deathTime = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deathtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppTeamInfo_Member::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppTeamInfo_Member::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppTeamInfo_Member::GetClassData() const { return &_class_data_; }

void AppTeamInfo_Member::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppTeamInfo_Member *>(to)->MergeFrom(
      static_cast<const AppTeamInfo_Member &>(from));
}


void AppTeamInfo_Member::MergeFrom(const AppTeamInfo_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppTeamInfo.Member)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      spawntime_ = from.spawntime_;
    }
    if (cached_has_bits & 0x00000020u) {
      isonline_ = from.isonline_;
    }
    if (cached_has_bits & 0x00000040u) {
      isalive_ = from.isalive_;
    }
    if (cached_has_bits & 0x00000080u) {
      deathtime_ = from.deathtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppTeamInfo_Member::CopyFrom(const AppTeamInfo_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppTeamInfo.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppTeamInfo_Member::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppTeamInfo_Member::InternalSwap(AppTeamInfo_Member* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppTeamInfo_Member, deathtime_)
      + sizeof(AppTeamInfo_Member::deathtime_)
      - PROTOBUF_FIELD_OFFSET(AppTeamInfo_Member, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppTeamInfo_Member::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[15]);
}

// ===================================================================

class AppTeamInfo_Note::_Internal {
 public:
  using HasBits = decltype(std::declval<AppTeamInfo_Note>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AppTeamInfo_Note::AppTeamInfo_Note(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppTeamInfo.Note)
}
AppTeamInfo_Note::AppTeamInfo_Note(const AppTeamInfo_Note& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&type_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:rustplus.AppTeamInfo.Note)
}

inline void AppTeamInfo_Note::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&type_)) + sizeof(y_));
}

AppTeamInfo_Note::~AppTeamInfo_Note() {
  // @@protoc_insertion_point(destructor:rustplus.AppTeamInfo.Note)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppTeamInfo_Note::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppTeamInfo_Note::ArenaDtor(void* object) {
  AppTeamInfo_Note* _this = reinterpret_cast< AppTeamInfo_Note* >(object);
  (void)_this;
}
void AppTeamInfo_Note::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppTeamInfo_Note::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppTeamInfo_Note::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppTeamInfo.Note)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&type_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppTeamInfo_Note::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppTeamInfo_Note::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppTeamInfo.Note)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppTeamInfo.Note)
  return target;
}

size_t AppTeamInfo_Note::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rustplus.AppTeamInfo.Note)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (_internal_has_x()) {
    // required float x = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t AppTeamInfo_Note::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppTeamInfo.Note)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());

    // required float x = 3;
    total_size += 1 + 4;

    // required float y = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppTeamInfo_Note::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppTeamInfo_Note::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppTeamInfo_Note::GetClassData() const { return &_class_data_; }

void AppTeamInfo_Note::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppTeamInfo_Note *>(to)->MergeFrom(
      static_cast<const AppTeamInfo_Note &>(from));
}


void AppTeamInfo_Note::MergeFrom(const AppTeamInfo_Note& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppTeamInfo.Note)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppTeamInfo_Note::CopyFrom(const AppTeamInfo_Note& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppTeamInfo.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppTeamInfo_Note::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppTeamInfo_Note::InternalSwap(AppTeamInfo_Note* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppTeamInfo_Note, y_)
      + sizeof(AppTeamInfo_Note::y_)
      - PROTOBUF_FIELD_OFFSET(AppTeamInfo_Note, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppTeamInfo_Note::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[16]);
}

// ===================================================================

class AppTeamInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AppTeamInfo>()._has_bits_);
  static void set_has_leadersteamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AppTeamInfo::AppTeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena),
  mapnotes_(arena),
  leadermapnotes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppTeamInfo)
}
AppTeamInfo::AppTeamInfo(const AppTeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_),
      mapnotes_(from.mapnotes_),
      leadermapnotes_(from.leadermapnotes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leadersteamid_ = from.leadersteamid_;
  // @@protoc_insertion_point(copy_constructor:rustplus.AppTeamInfo)
}

inline void AppTeamInfo::SharedCtor() {
leadersteamid_ = uint64_t{0u};
}

AppTeamInfo::~AppTeamInfo() {
  // @@protoc_insertion_point(destructor:rustplus.AppTeamInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppTeamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppTeamInfo::ArenaDtor(void* object) {
  AppTeamInfo* _this = reinterpret_cast< AppTeamInfo* >(object);
  (void)_this;
}
void AppTeamInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppTeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppTeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppTeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  mapnotes_.Clear();
  leadermapnotes_.Clear();
  leadersteamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppTeamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 leaderSteamId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_leadersteamid(&has_bits);
          leadersteamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .rustplus.AppTeamInfo.Member members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .rustplus.AppTeamInfo.Note mapNotes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mapnotes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .rustplus.AppTeamInfo.Note leaderMapNotes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leadermapnotes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppTeamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppTeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 leaderSteamId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_leadersteamid(), target);
  }

  // repeated .rustplus.AppTeamInfo.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_members(i), target, stream);
  }

  // repeated .rustplus.AppTeamInfo.Note mapNotes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mapnotes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_mapnotes(i), target, stream);
  }

  // repeated .rustplus.AppTeamInfo.Note leaderMapNotes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leadermapnotes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_leadermapnotes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppTeamInfo)
  return target;
}

size_t AppTeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppTeamInfo)
  size_t total_size = 0;

  // required uint64 leaderSteamId = 1;
  if (_internal_has_leadersteamid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_leadersteamid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rustplus.AppTeamInfo.Member members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rustplus.AppTeamInfo.Note mapNotes = 3;
  total_size += 1UL * this->_internal_mapnotes_size();
  for (const auto& msg : this->mapnotes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rustplus.AppTeamInfo.Note leaderMapNotes = 4;
  total_size += 1UL * this->_internal_leadermapnotes_size();
  for (const auto& msg : this->leadermapnotes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppTeamInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppTeamInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppTeamInfo::GetClassData() const { return &_class_data_; }

void AppTeamInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppTeamInfo *>(to)->MergeFrom(
      static_cast<const AppTeamInfo &>(from));
}


void AppTeamInfo::MergeFrom(const AppTeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  mapnotes_.MergeFrom(from.mapnotes_);
  leadermapnotes_.MergeFrom(from.leadermapnotes_);
  if (from._internal_has_leadersteamid()) {
    _internal_set_leadersteamid(from._internal_leadersteamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppTeamInfo::CopyFrom(const AppTeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppTeamInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(members_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(mapnotes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(leadermapnotes_)) return false;
  return true;
}

void AppTeamInfo::InternalSwap(AppTeamInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  mapnotes_.InternalSwap(&other->mapnotes_);
  leadermapnotes_.InternalSwap(&other->leadermapnotes_);
  swap(leadersteamid_, other->leadersteamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppTeamInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[17]);
}

// ===================================================================

class AppTeamChat::_Internal {
 public:
};

AppTeamChat::AppTeamChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  messages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppTeamChat)
}
AppTeamChat::AppTeamChat(const AppTeamChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rustplus.AppTeamChat)
}

inline void AppTeamChat::SharedCtor() {
}

AppTeamChat::~AppTeamChat() {
  // @@protoc_insertion_point(destructor:rustplus.AppTeamChat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppTeamChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppTeamChat::ArenaDtor(void* object) {
  AppTeamChat* _this = reinterpret_cast< AppTeamChat* >(object);
  (void)_this;
}
void AppTeamChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppTeamChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppTeamChat::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppTeamChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppTeamChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rustplus.AppChatMessage messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppTeamChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppTeamChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rustplus.AppChatMessage messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppTeamChat)
  return target;
}

size_t AppTeamChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppTeamChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rustplus.AppChatMessage messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppTeamChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppTeamChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppTeamChat::GetClassData() const { return &_class_data_; }

void AppTeamChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppTeamChat *>(to)->MergeFrom(
      static_cast<const AppTeamChat &>(from));
}


void AppTeamChat::MergeFrom(const AppTeamChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppTeamChat)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppTeamChat::CopyFrom(const AppTeamChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppTeamChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppTeamChat::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(messages_)) return false;
  return true;
}

void AppTeamChat::InternalSwap(AppTeamChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppTeamChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[18]);
}

// ===================================================================

class AppChatMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AppChatMessage>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

AppChatMessage::AppChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppChatMessage)
}
AppChatMessage::AppChatMessage(const AppChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_color()) {
    color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:rustplus.AppChatMessage)
}

inline void AppChatMessage::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(time_));
}

AppChatMessage::~AppChatMessage() {
  // @@protoc_insertion_point(destructor:rustplus.AppChatMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppChatMessage::ArenaDtor(void* object) {
  AppChatMessage* _this = reinterpret_cast< AppChatMessage* >(object);
  (void)_this;
}
void AppChatMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppChatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      color_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppChatMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 steamId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rustplus.AppChatMessage.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rustplus.AppChatMessage.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rustplus.AppChatMessage.color");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppChatMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppChatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 steamId = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steamid(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rustplus.AppChatMessage.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required string message = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rustplus.AppChatMessage.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // required string color = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rustplus.AppChatMessage.color");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_color(), target);
  }

  // required uint32 time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppChatMessage)
  return target;
}

size_t AppChatMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rustplus.AppChatMessage)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_message()) {
    // required string message = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_color()) {
    // required string color = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  if (_internal_has_steamid()) {
    // required uint64 steamId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_steamid());
  }

  if (_internal_has_time()) {
    // required uint32 time = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  return total_size;
}
size_t AppChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppChatMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string message = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required string color = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());

    // required uint64 steamId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_steamid());

    // required uint32 time = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppChatMessage::GetClassData() const { return &_class_data_; }

void AppChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppChatMessage *>(to)->MergeFrom(
      static_cast<const AppChatMessage &>(from));
}


void AppChatMessage::MergeFrom(const AppChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_color(from._internal_color());
    }
    if (cached_has_bits & 0x00000008u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppChatMessage::CopyFrom(const AppChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppChatMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppChatMessage::InternalSwap(AppChatMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &color_, GetArenaForAllocation(),
      &other->color_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppChatMessage, time_)
      + sizeof(AppChatMessage::time_)
      - PROTOBUF_FIELD_OFFSET(AppChatMessage, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppChatMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[19]);
}

// ===================================================================

class AppEntityInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AppEntityInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::rustplus::AppEntityPayload& payload(const AppEntityInfo* msg);
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::rustplus::AppEntityPayload&
AppEntityInfo::_Internal::payload(const AppEntityInfo* msg) {
  return *msg->payload_;
}
AppEntityInfo::AppEntityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppEntityInfo)
}
AppEntityInfo::AppEntityInfo(const AppEntityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_payload()) {
    payload_ = new ::rustplus::AppEntityPayload(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:rustplus.AppEntityInfo)
}

inline void AppEntityInfo::SharedCtor() {
payload_ = nullptr;
type_ = 1;
}

AppEntityInfo::~AppEntityInfo() {
  // @@protoc_insertion_point(destructor:rustplus.AppEntityInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppEntityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete payload_;
}

void AppEntityInfo::ArenaDtor(void* object) {
  AppEntityInfo* _this = reinterpret_cast< AppEntityInfo* >(object);
  (void)_this;
}
void AppEntityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppEntityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppEntityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppEntityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(payload_ != nullptr);
      payload_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppEntityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .rustplus.AppEntityType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::rustplus::AppEntityType_IsValid(val))) {
            _internal_set_type(static_cast<::rustplus::AppEntityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .rustplus.AppEntityPayload payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppEntityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppEntityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .rustplus.AppEntityType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required .rustplus.AppEntityPayload payload = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppEntityInfo)
  return target;
}

size_t AppEntityInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rustplus.AppEntityInfo)
  size_t total_size = 0;

  if (_internal_has_payload()) {
    // required .rustplus.AppEntityPayload payload = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  if (_internal_has_type()) {
    // required .rustplus.AppEntityType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t AppEntityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppEntityInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .rustplus.AppEntityPayload payload = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);

    // required .rustplus.AppEntityType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppEntityInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppEntityInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppEntityInfo::GetClassData() const { return &_class_data_; }

void AppEntityInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppEntityInfo *>(to)->MergeFrom(
      static_cast<const AppEntityInfo &>(from));
}


void AppEntityInfo::MergeFrom(const AppEntityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppEntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_payload()->::rustplus::AppEntityPayload::MergeFrom(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppEntityInfo::CopyFrom(const AppEntityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppEntityInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_payload()) {
    if (!payload_->IsInitialized()) return false;
  }
  return true;
}

void AppEntityInfo::InternalSwap(AppEntityInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(payload_, other->payload_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppEntityInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[20]);
}

// ===================================================================

class AppEntityPayload_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<AppEntityPayload_Item>()._has_bits_);
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_itemisblueprint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AppEntityPayload_Item::AppEntityPayload_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppEntityPayload.Item)
}
AppEntityPayload_Item::AppEntityPayload_Item(const AppEntityPayload_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemisblueprint_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(itemisblueprint_));
  // @@protoc_insertion_point(copy_constructor:rustplus.AppEntityPayload.Item)
}

inline void AppEntityPayload_Item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&itemisblueprint_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(itemisblueprint_));
}

AppEntityPayload_Item::~AppEntityPayload_Item() {
  // @@protoc_insertion_point(destructor:rustplus.AppEntityPayload.Item)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppEntityPayload_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppEntityPayload_Item::ArenaDtor(void* object) {
  AppEntityPayload_Item* _this = reinterpret_cast< AppEntityPayload_Item* >(object);
  (void)_this;
}
void AppEntityPayload_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppEntityPayload_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppEntityPayload_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppEntityPayload.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&itemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemisblueprint_) -
        reinterpret_cast<char*>(&itemid_)) + sizeof(itemisblueprint_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppEntityPayload_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 itemId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool itemIsBlueprint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_itemisblueprint(&has_bits);
          itemisblueprint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppEntityPayload_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppEntityPayload.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 itemId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_itemid(), target);
  }

  // required int32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_quantity(), target);
  }

  // required bool itemIsBlueprint = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_itemisblueprint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppEntityPayload.Item)
  return target;
}

size_t AppEntityPayload_Item::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rustplus.AppEntityPayload.Item)
  size_t total_size = 0;

  if (_internal_has_itemid()) {
    // required int32 itemId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itemid());
  }

  if (_internal_has_quantity()) {
    // required int32 quantity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quantity());
  }

  if (_internal_has_itemisblueprint()) {
    // required bool itemIsBlueprint = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t AppEntityPayload_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppEntityPayload.Item)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 itemId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itemid());

    // required int32 quantity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quantity());

    // required bool itemIsBlueprint = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppEntityPayload_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppEntityPayload_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppEntityPayload_Item::GetClassData() const { return &_class_data_; }

void AppEntityPayload_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppEntityPayload_Item *>(to)->MergeFrom(
      static_cast<const AppEntityPayload_Item &>(from));
}


void AppEntityPayload_Item::MergeFrom(const AppEntityPayload_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppEntityPayload.Item)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000004u) {
      itemisblueprint_ = from.itemisblueprint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppEntityPayload_Item::CopyFrom(const AppEntityPayload_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppEntityPayload.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppEntityPayload_Item::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppEntityPayload_Item::InternalSwap(AppEntityPayload_Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppEntityPayload_Item, itemisblueprint_)
      + sizeof(AppEntityPayload_Item::itemisblueprint_)
      - PROTOBUF_FIELD_OFFSET(AppEntityPayload_Item, itemid_)>(
          reinterpret_cast<char*>(&itemid_),
          reinterpret_cast<char*>(&other->itemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppEntityPayload_Item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[21]);
}

// ===================================================================

class AppEntityPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<AppEntityPayload>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hasprotection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_protectionexpiry(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AppEntityPayload::AppEntityPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppEntityPayload)
}
AppEntityPayload::AppEntityPayload(const AppEntityPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&protectionexpiry_) -
    reinterpret_cast<char*>(&value_)) + sizeof(protectionexpiry_));
  // @@protoc_insertion_point(copy_constructor:rustplus.AppEntityPayload)
}

inline void AppEntityPayload::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&protectionexpiry_) -
    reinterpret_cast<char*>(&value_)) + sizeof(protectionexpiry_));
}

AppEntityPayload::~AppEntityPayload() {
  // @@protoc_insertion_point(destructor:rustplus.AppEntityPayload)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppEntityPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppEntityPayload::ArenaDtor(void* object) {
  AppEntityPayload* _this = reinterpret_cast< AppEntityPayload* >(object);
  (void)_this;
}
void AppEntityPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppEntityPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppEntityPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppEntityPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&protectionexpiry_) -
        reinterpret_cast<char*>(&value_)) + sizeof(protectionexpiry_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppEntityPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .rustplus.AppEntityPayload.Item items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_capacity(&has_bits);
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hasProtection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hasprotection(&has_bits);
          hasprotection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 protectionExpiry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_protectionexpiry(&has_bits);
          protectionexpiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppEntityPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppEntityPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  // repeated .rustplus.AppEntityPayload.Item items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  // optional int32 capacity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_capacity(), target);
  }

  // optional bool hasProtection = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_hasprotection(), target);
  }

  // optional uint32 protectionExpiry = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_protectionexpiry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppEntityPayload)
  return target;
}

size_t AppEntityPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppEntityPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rustplus.AppEntityPayload.Item items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool hasProtection = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 capacity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_capacity());
    }

    // optional uint32 protectionExpiry = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_protectionexpiry());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppEntityPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppEntityPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppEntityPayload::GetClassData() const { return &_class_data_; }

void AppEntityPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppEntityPayload *>(to)->MergeFrom(
      static_cast<const AppEntityPayload &>(from));
}


void AppEntityPayload::MergeFrom(const AppEntityPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppEntityPayload)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      hasprotection_ = from.hasprotection_;
    }
    if (cached_has_bits & 0x00000004u) {
      capacity_ = from.capacity_;
    }
    if (cached_has_bits & 0x00000008u) {
      protectionexpiry_ = from.protectionexpiry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppEntityPayload::CopyFrom(const AppEntityPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppEntityPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppEntityPayload::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(items_)) return false;
  return true;
}

void AppEntityPayload::InternalSwap(AppEntityPayload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppEntityPayload, protectionexpiry_)
      + sizeof(AppEntityPayload::protectionexpiry_)
      - PROTOBUF_FIELD_OFFSET(AppEntityPayload, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppEntityPayload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[22]);
}

// ===================================================================

class AppFlag::_Internal {
 public:
  using HasBits = decltype(std::declval<AppFlag>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AppFlag::AppFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppFlag)
}
AppFlag::AppFlag(const AppFlag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:rustplus.AppFlag)
}

inline void AppFlag::SharedCtor() {
value_ = false;
}

AppFlag::~AppFlag() {
  // @@protoc_insertion_point(destructor:rustplus.AppFlag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppFlag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppFlag::ArenaDtor(void* object) {
  AppFlag* _this = reinterpret_cast< AppFlag* >(object);
  (void)_this;
}
void AppFlag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppFlag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppFlag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppFlag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppFlag)
  return target;
}

size_t AppFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppFlag)
  size_t total_size = 0;

  // required bool value = 1;
  if (_internal_has_value()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppFlag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppFlag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppFlag::GetClassData() const { return &_class_data_; }

void AppFlag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppFlag *>(to)->MergeFrom(
      static_cast<const AppFlag &>(from));
}


void AppFlag::MergeFrom(const AppFlag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppFlag)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppFlag::CopyFrom(const AppFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppFlag::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppFlag::InternalSwap(AppFlag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppFlag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[23]);
}

// ===================================================================

class AppMapMarkers::_Internal {
 public:
};

AppMapMarkers::AppMapMarkers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  markers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppMapMarkers)
}
AppMapMarkers::AppMapMarkers(const AppMapMarkers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      markers_(from.markers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rustplus.AppMapMarkers)
}

inline void AppMapMarkers::SharedCtor() {
}

AppMapMarkers::~AppMapMarkers() {
  // @@protoc_insertion_point(destructor:rustplus.AppMapMarkers)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppMapMarkers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppMapMarkers::ArenaDtor(void* object) {
  AppMapMarkers* _this = reinterpret_cast< AppMapMarkers* >(object);
  (void)_this;
}
void AppMapMarkers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppMapMarkers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppMapMarkers::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppMapMarkers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppMapMarkers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rustplus.AppMarker markers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMapMarkers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppMapMarkers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rustplus.AppMarker markers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_markers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_markers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppMapMarkers)
  return target;
}

size_t AppMapMarkers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppMapMarkers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rustplus.AppMarker markers = 1;
  total_size += 1UL * this->_internal_markers_size();
  for (const auto& msg : this->markers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppMapMarkers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppMapMarkers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppMapMarkers::GetClassData() const { return &_class_data_; }

void AppMapMarkers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppMapMarkers *>(to)->MergeFrom(
      static_cast<const AppMapMarkers &>(from));
}


void AppMapMarkers::MergeFrom(const AppMapMarkers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppMapMarkers)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markers_.MergeFrom(from.markers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppMapMarkers::CopyFrom(const AppMapMarkers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppMapMarkers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMapMarkers::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(markers_)) return false;
  return true;
}

void AppMapMarkers::InternalSwap(AppMapMarkers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  markers_.InternalSwap(&other->markers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMapMarkers::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[24]);
}

// ===================================================================

class Vector4::_Internal {
 public:
  using HasBits = decltype(std::declval<Vector4>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Vector4::Vector4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.Vector4)
}
Vector4::Vector4(const Vector4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:rustplus.Vector4)
}

inline void Vector4::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Vector4::~Vector4() {
  // @@protoc_insertion_point(destructor:rustplus.Vector4)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vector4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector4::ArenaDtor(void* object) {
  Vector4* _this = reinterpret_cast< Vector4* >(object);
  (void)_this;
}
void Vector4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector4::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.Vector4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&w_) -
        reinterpret_cast<char*>(&x_)) + sizeof(w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.Vector4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // optional float w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.Vector4)
  return target;
}

size_t Vector4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.Vector4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float w = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vector4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector4::GetClassData() const { return &_class_data_; }

void Vector4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Vector4 *>(to)->MergeFrom(
      static_cast<const Vector4 &>(from));
}


void Vector4::MergeFrom(const Vector4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.Vector4)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      w_ = from.w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector4::CopyFrom(const Vector4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.Vector4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector4::IsInitialized() const {
  return true;
}

void Vector4::InternalSwap(Vector4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector4, w_)
      + sizeof(Vector4::w_)
      - PROTOBUF_FIELD_OFFSET(Vector4, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector4::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[25]);
}

// ===================================================================

class AppMarker_SellOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<AppMarker_SellOrder>()._has_bits_);
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_currencyid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_costperitem(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_amountinstock(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_itemisblueprint(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_currencyisblueprint(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

AppMarker_SellOrder::AppMarker_SellOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppMarker.SellOrder)
}
AppMarker_SellOrder::AppMarker_SellOrder(const AppMarker_SellOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&currencyisblueprint_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(currencyisblueprint_));
  // @@protoc_insertion_point(copy_constructor:rustplus.AppMarker.SellOrder)
}

inline void AppMarker_SellOrder::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&currencyisblueprint_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(currencyisblueprint_));
}

AppMarker_SellOrder::~AppMarker_SellOrder() {
  // @@protoc_insertion_point(destructor:rustplus.AppMarker.SellOrder)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppMarker_SellOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppMarker_SellOrder::ArenaDtor(void* object) {
  AppMarker_SellOrder* _this = reinterpret_cast< AppMarker_SellOrder* >(object);
  (void)_this;
}
void AppMarker_SellOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppMarker_SellOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppMarker_SellOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppMarker.SellOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&itemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&currencyisblueprint_) -
        reinterpret_cast<char*>(&itemid_)) + sizeof(currencyisblueprint_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppMarker_SellOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 itemId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 currencyId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_currencyid(&has_bits);
          currencyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 costPerItem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_costperitem(&has_bits);
          costperitem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 amountInStock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_amountinstock(&has_bits);
          amountinstock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool itemIsBlueprint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_itemisblueprint(&has_bits);
          itemisblueprint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool currencyIsBlueprint = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_currencyisblueprint(&has_bits);
          currencyisblueprint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMarker_SellOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppMarker.SellOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 itemId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_itemid(), target);
  }

  // required int32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_quantity(), target);
  }

  // required int32 currencyId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_currencyid(), target);
  }

  // required int32 costPerItem = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_costperitem(), target);
  }

  // required int32 amountInStock = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_amountinstock(), target);
  }

  // required bool itemIsBlueprint = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_itemisblueprint(), target);
  }

  // required bool currencyIsBlueprint = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_currencyisblueprint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppMarker.SellOrder)
  return target;
}

size_t AppMarker_SellOrder::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rustplus.AppMarker.SellOrder)
  size_t total_size = 0;

  if (_internal_has_itemid()) {
    // required int32 itemId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itemid());
  }

  if (_internal_has_quantity()) {
    // required int32 quantity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quantity());
  }

  if (_internal_has_currencyid()) {
    // required int32 currencyId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_currencyid());
  }

  if (_internal_has_costperitem()) {
    // required int32 costPerItem = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_costperitem());
  }

  if (_internal_has_amountinstock()) {
    // required int32 amountInStock = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_amountinstock());
  }

  if (_internal_has_itemisblueprint()) {
    // required bool itemIsBlueprint = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_currencyisblueprint()) {
    // required bool currencyIsBlueprint = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t AppMarker_SellOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppMarker.SellOrder)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required int32 itemId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itemid());

    // required int32 quantity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quantity());

    // required int32 currencyId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_currencyid());

    // required int32 costPerItem = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_costperitem());

    // required int32 amountInStock = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_amountinstock());

    // required bool itemIsBlueprint = 6;
    total_size += 1 + 1;

    // required bool currencyIsBlueprint = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppMarker_SellOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppMarker_SellOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppMarker_SellOrder::GetClassData() const { return &_class_data_; }

void AppMarker_SellOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppMarker_SellOrder *>(to)->MergeFrom(
      static_cast<const AppMarker_SellOrder &>(from));
}


void AppMarker_SellOrder::MergeFrom(const AppMarker_SellOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppMarker.SellOrder)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000004u) {
      currencyid_ = from.currencyid_;
    }
    if (cached_has_bits & 0x00000008u) {
      costperitem_ = from.costperitem_;
    }
    if (cached_has_bits & 0x00000010u) {
      amountinstock_ = from.amountinstock_;
    }
    if (cached_has_bits & 0x00000020u) {
      itemisblueprint_ = from.itemisblueprint_;
    }
    if (cached_has_bits & 0x00000040u) {
      currencyisblueprint_ = from.currencyisblueprint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppMarker_SellOrder::CopyFrom(const AppMarker_SellOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppMarker.SellOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMarker_SellOrder::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppMarker_SellOrder::InternalSwap(AppMarker_SellOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppMarker_SellOrder, currencyisblueprint_)
      + sizeof(AppMarker_SellOrder::currencyisblueprint_)
      - PROTOBUF_FIELD_OFFSET(AppMarker_SellOrder, itemid_)>(
          reinterpret_cast<char*>(&itemid_),
          reinterpret_cast<char*>(&other->itemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMarker_SellOrder::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[26]);
}

// ===================================================================

class AppMarker::_Internal {
 public:
  using HasBits = decltype(std::declval<AppMarker>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::rustplus::Vector4& color1(const AppMarker* msg);
  static void set_has_color1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::rustplus::Vector4& color2(const AppMarker* msg);
  static void set_has_color2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000458) ^ 0x00000458) != 0;
  }
};

const ::rustplus::Vector4&
AppMarker::_Internal::color1(const AppMarker* msg) {
  return *msg->color1_;
}
const ::rustplus::Vector4&
AppMarker::_Internal::color2(const AppMarker* msg) {
  return *msg->color2_;
}
AppMarker::AppMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sellorders_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppMarker)
}
AppMarker::AppMarker(const AppMarker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sellorders_(from.sellorders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_color1()) {
    color1_ = new ::rustplus::Vector4(*from.color1_);
  } else {
    color1_ = nullptr;
  }
  if (from._internal_has_color2()) {
    color2_ = new ::rustplus::Vector4(*from.color2_);
  } else {
    color2_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:rustplus.AppMarker)
}

inline void AppMarker::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&alpha_) -
    reinterpret_cast<char*>(&color1_)) + sizeof(alpha_));
type_ = 1;
}

AppMarker::~AppMarker() {
  // @@protoc_insertion_point(destructor:rustplus.AppMarker)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppMarker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete color1_;
  if (this != internal_default_instance()) delete color2_;
}

void AppMarker::ArenaDtor(void* object) {
  AppMarker* _this = reinterpret_cast< AppMarker* >(object);
  (void)_this;
}
void AppMarker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppMarker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sellorders_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(color1_ != nullptr);
      color1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(color2_ != nullptr);
      color2_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotation_) -
        reinterpret_cast<char*>(&id_)) + sizeof(rotation_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&alpha_) -
        reinterpret_cast<char*>(&radius_)) + sizeof(alpha_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppMarker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .rustplus.AppMarkerType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::rustplus::AppMarkerType_IsValid(val))) {
            _internal_set_type(static_cast<::rustplus::AppMarkerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint64 steamId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rotation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_rotation(&has_bits);
          rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float radius = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.Vector4 color1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_color1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rustplus.Vector4 color2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_color2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float alpha = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_alpha(&has_bits);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rustplus.AppMarker.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .rustplus.AppMarker.SellOrder sellOrders = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sellorders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMarker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // required .rustplus.AppMarkerType type = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // optional uint64 steamId = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_steamid(), target);
  }

  // optional float rotation = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_rotation(), target);
  }

  // optional float radius = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_radius(), target);
  }

  // optional .rustplus.Vector4 color1 = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::color1(this), target, stream);
  }

  // optional .rustplus.Vector4 color2 = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::color2(this), target, stream);
  }

  // optional float alpha = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_alpha(), target);
  }

  // optional string name = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rustplus.AppMarker.name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_name(), target);
  }

  // repeated .rustplus.AppMarker.SellOrder sellOrders = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sellorders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_sellorders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppMarker)
  return target;
}

size_t AppMarker::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rustplus.AppMarker)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (_internal_has_x()) {
    // required float x = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_type()) {
    // required .rustplus.AppMarkerType type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t AppMarker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppMarker)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000458) ^ 0x00000458) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

    // required float x = 3;
    total_size += 1 + 4;

    // required float y = 4;
    total_size += 1 + 4;

    // required .rustplus.AppMarkerType type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rustplus.AppMarker.SellOrder sellOrders = 13;
  total_size += 1UL * this->_internal_sellorders_size();
  for (const auto& msg : this->sellorders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .rustplus.Vector4 color1 = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color1_);
    }

    // optional .rustplus.Vector4 color2 = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color2_);
    }

  }
  // optional uint64 steamId = 5;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_steamid());
  }

  // optional float rotation = 6;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 + 4;
  }

  if (cached_has_bits & 0x00000300u) {
    // optional float radius = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float alpha = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppMarker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppMarker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppMarker::GetClassData() const { return &_class_data_; }

void AppMarker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppMarker *>(to)->MergeFrom(
      static_cast<const AppMarker &>(from));
}


void AppMarker::MergeFrom(const AppMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppMarker)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sellorders_.MergeFrom(from.sellorders_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_color1()->::rustplus::Vector4::MergeFrom(from._internal_color1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_color2()->::rustplus::Vector4::MergeFrom(from._internal_color2());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000020u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000040u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000080u) {
      rotation_ = from.rotation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000200u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000400u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppMarker::CopyFrom(const AppMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMarker::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sellorders_)) return false;
  return true;
}

void AppMarker::InternalSwap(AppMarker* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sellorders_.InternalSwap(&other->sellorders_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppMarker, alpha_)
      + sizeof(AppMarker::alpha_)
      - PROTOBUF_FIELD_OFFSET(AppMarker, color1_)>(
          reinterpret_cast<char*>(&color1_),
          reinterpret_cast<char*>(&other->color1_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMarker::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[27]);
}

// ===================================================================

class AppCameraFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<AppCameraFrame>()._has_bits_);
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_jpgimage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AppCameraFrame::AppCameraFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppCameraFrame)
}
AppCameraFrame::AppCameraFrame(const AppCameraFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  jpgimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_jpgimage()) {
    jpgimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_jpgimage(), 
      GetArenaForAllocation());
  }
  frame_ = from.frame_;
  // @@protoc_insertion_point(copy_constructor:rustplus.AppCameraFrame)
}

inline void AppCameraFrame::SharedCtor() {
jpgimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
frame_ = 0u;
}

AppCameraFrame::~AppCameraFrame() {
  // @@protoc_insertion_point(destructor:rustplus.AppCameraFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppCameraFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  jpgimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppCameraFrame::ArenaDtor(void* object) {
  AppCameraFrame* _this = reinterpret_cast< AppCameraFrame* >(object);
  (void)_this;
}
void AppCameraFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppCameraFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppCameraFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppCameraFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    jpgimage_.ClearNonDefaultToEmpty();
  }
  frame_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppCameraFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_frame(&has_bits);
          frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes jpgImage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_jpgimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppCameraFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppCameraFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 frame = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frame(), target);
  }

  // required bytes jpgImage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_jpgimage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppCameraFrame)
  return target;
}

size_t AppCameraFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rustplus.AppCameraFrame)
  size_t total_size = 0;

  if (_internal_has_jpgimage()) {
    // required bytes jpgImage = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_jpgimage());
  }

  if (_internal_has_frame()) {
    // required uint32 frame = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame());
  }

  return total_size;
}
size_t AppCameraFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppCameraFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes jpgImage = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_jpgimage());

    // required uint32 frame = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppCameraFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppCameraFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppCameraFrame::GetClassData() const { return &_class_data_; }

void AppCameraFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppCameraFrame *>(to)->MergeFrom(
      static_cast<const AppCameraFrame &>(from));
}


void AppCameraFrame::MergeFrom(const AppCameraFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppCameraFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_jpgimage(from._internal_jpgimage());
    }
    if (cached_has_bits & 0x00000002u) {
      frame_ = from.frame_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppCameraFrame::CopyFrom(const AppCameraFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppCameraFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppCameraFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppCameraFrame::InternalSwap(AppCameraFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &jpgimage_, GetArenaForAllocation(),
      &other->jpgimage_, other->GetArenaForAllocation()
  );
  swap(frame_, other->frame_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppCameraFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[28]);
}

// ===================================================================

class AppTeamChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<AppTeamChanged>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::rustplus::AppTeamInfo& teaminfo(const AppTeamChanged* msg);
  static void set_has_teaminfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::rustplus::AppTeamInfo&
AppTeamChanged::_Internal::teaminfo(const AppTeamChanged* msg) {
  return *msg->teaminfo_;
}
AppTeamChanged::AppTeamChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppTeamChanged)
}
AppTeamChanged::AppTeamChanged(const AppTeamChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_teaminfo()) {
    teaminfo_ = new ::rustplus::AppTeamInfo(*from.teaminfo_);
  } else {
    teaminfo_ = nullptr;
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:rustplus.AppTeamChanged)
}

inline void AppTeamChanged::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&teaminfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&teaminfo_)) + sizeof(playerid_));
}

AppTeamChanged::~AppTeamChanged() {
  // @@protoc_insertion_point(destructor:rustplus.AppTeamChanged)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppTeamChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete teaminfo_;
}

void AppTeamChanged::ArenaDtor(void* object) {
  AppTeamChanged* _this = reinterpret_cast< AppTeamChanged* >(object);
  (void)_this;
}
void AppTeamChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppTeamChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppTeamChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppTeamChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(teaminfo_ != nullptr);
    teaminfo_->Clear();
  }
  playerid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppTeamChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .rustplus.AppTeamInfo teamInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_teaminfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppTeamChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppTeamChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 playerId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playerid(), target);
  }

  // required .rustplus.AppTeamInfo teamInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::teaminfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppTeamChanged)
  return target;
}

size_t AppTeamChanged::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rustplus.AppTeamChanged)
  size_t total_size = 0;

  if (_internal_has_teaminfo()) {
    // required .rustplus.AppTeamInfo teamInfo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *teaminfo_);
  }

  if (_internal_has_playerid()) {
    // required uint64 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_playerid());
  }

  return total_size;
}
size_t AppTeamChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppTeamChanged)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .rustplus.AppTeamInfo teamInfo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *teaminfo_);

    // required uint64 playerId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppTeamChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppTeamChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppTeamChanged::GetClassData() const { return &_class_data_; }

void AppTeamChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppTeamChanged *>(to)->MergeFrom(
      static_cast<const AppTeamChanged &>(from));
}


void AppTeamChanged::MergeFrom(const AppTeamChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppTeamChanged)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_teaminfo()->::rustplus::AppTeamInfo::MergeFrom(from._internal_teaminfo());
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppTeamChanged::CopyFrom(const AppTeamChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppTeamChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppTeamChanged::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_teaminfo()) {
    if (!teaminfo_->IsInitialized()) return false;
  }
  return true;
}

void AppTeamChanged::InternalSwap(AppTeamChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppTeamChanged, playerid_)
      + sizeof(AppTeamChanged::playerid_)
      - PROTOBUF_FIELD_OFFSET(AppTeamChanged, teaminfo_)>(
          reinterpret_cast<char*>(&teaminfo_),
          reinterpret_cast<char*>(&other->teaminfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppTeamChanged::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[29]);
}

// ===================================================================

class AppTeamMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AppTeamMessage>()._has_bits_);
  static const ::rustplus::AppChatMessage& message(const AppTeamMessage* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::rustplus::AppChatMessage&
AppTeamMessage::_Internal::message(const AppTeamMessage* msg) {
  return *msg->message_;
}
AppTeamMessage::AppTeamMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppTeamMessage)
}
AppTeamMessage::AppTeamMessage(const AppTeamMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    message_ = new ::rustplus::AppChatMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rustplus.AppTeamMessage)
}

inline void AppTeamMessage::SharedCtor() {
message_ = nullptr;
}

AppTeamMessage::~AppTeamMessage() {
  // @@protoc_insertion_point(destructor:rustplus.AppTeamMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppTeamMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete message_;
}

void AppTeamMessage::ArenaDtor(void* object) {
  AppTeamMessage* _this = reinterpret_cast< AppTeamMessage* >(object);
  (void)_this;
}
void AppTeamMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppTeamMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppTeamMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppTeamMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(message_ != nullptr);
    message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppTeamMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .rustplus.AppChatMessage message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppTeamMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppTeamMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .rustplus.AppChatMessage message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppTeamMessage)
  return target;
}

size_t AppTeamMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppTeamMessage)
  size_t total_size = 0;

  // required .rustplus.AppChatMessage message = 1;
  if (_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppTeamMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppTeamMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppTeamMessage::GetClassData() const { return &_class_data_; }

void AppTeamMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppTeamMessage *>(to)->MergeFrom(
      static_cast<const AppTeamMessage &>(from));
}


void AppTeamMessage::MergeFrom(const AppTeamMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppTeamMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_mutable_message()->::rustplus::AppChatMessage::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppTeamMessage::CopyFrom(const AppTeamMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppTeamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppTeamMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_message()) {
    if (!message_->IsInitialized()) return false;
  }
  return true;
}

void AppTeamMessage::InternalSwap(AppTeamMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppTeamMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[30]);
}

// ===================================================================

class AppEntityChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<AppEntityChanged>()._has_bits_);
  static void set_has_entityid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::rustplus::AppEntityPayload& payload(const AppEntityChanged* msg);
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::rustplus::AppEntityPayload&
AppEntityChanged::_Internal::payload(const AppEntityChanged* msg) {
  return *msg->payload_;
}
AppEntityChanged::AppEntityChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rustplus.AppEntityChanged)
}
AppEntityChanged::AppEntityChanged(const AppEntityChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_payload()) {
    payload_ = new ::rustplus::AppEntityPayload(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  entityid_ = from.entityid_;
  // @@protoc_insertion_point(copy_constructor:rustplus.AppEntityChanged)
}

inline void AppEntityChanged::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&payload_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entityid_) -
    reinterpret_cast<char*>(&payload_)) + sizeof(entityid_));
}

AppEntityChanged::~AppEntityChanged() {
  // @@protoc_insertion_point(destructor:rustplus.AppEntityChanged)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppEntityChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete payload_;
}

void AppEntityChanged::ArenaDtor(void* object) {
  AppEntityChanged* _this = reinterpret_cast< AppEntityChanged* >(object);
  (void)_this;
}
void AppEntityChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppEntityChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppEntityChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:rustplus.AppEntityChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(payload_ != nullptr);
    payload_->Clear();
  }
  entityid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppEntityChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 entityId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entityid(&has_bits);
          entityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .rustplus.AppEntityPayload payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppEntityChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rustplus.AppEntityChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 entityId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entityid(), target);
  }

  // required .rustplus.AppEntityPayload payload = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rustplus.AppEntityChanged)
  return target;
}

size_t AppEntityChanged::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rustplus.AppEntityChanged)
  size_t total_size = 0;

  if (_internal_has_payload()) {
    // required .rustplus.AppEntityPayload payload = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  if (_internal_has_entityid()) {
    // required uint32 entityId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entityid());
  }

  return total_size;
}
size_t AppEntityChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rustplus.AppEntityChanged)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .rustplus.AppEntityPayload payload = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);

    // required uint32 entityId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entityid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppEntityChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppEntityChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppEntityChanged::GetClassData() const { return &_class_data_; }

void AppEntityChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppEntityChanged *>(to)->MergeFrom(
      static_cast<const AppEntityChanged &>(from));
}


void AppEntityChanged::MergeFrom(const AppEntityChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rustplus.AppEntityChanged)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_payload()->::rustplus::AppEntityPayload::MergeFrom(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      entityid_ = from.entityid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppEntityChanged::CopyFrom(const AppEntityChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rustplus.AppEntityChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppEntityChanged::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_payload()) {
    if (!payload_->IsInitialized()) return false;
  }
  return true;
}

void AppEntityChanged::InternalSwap(AppEntityChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppEntityChanged, entityid_)
      + sizeof(AppEntityChanged::entityid_)
      - PROTOBUF_FIELD_OFFSET(AppEntityChanged, payload_)>(
          reinterpret_cast<char*>(&payload_),
          reinterpret_cast<char*>(&other->payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppEntityChanged::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rustplus_2eproto_getter, &descriptor_table_rustplus_2eproto_once,
      file_level_metadata_rustplus_2eproto[31]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rustplus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rustplus::AppMessage* Arena::CreateMaybeMessage< ::rustplus::AppMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppRequest* Arena::CreateMaybeMessage< ::rustplus::AppRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppSendMessage* Arena::CreateMaybeMessage< ::rustplus::AppSendMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppSendMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppSetEntityValue* Arena::CreateMaybeMessage< ::rustplus::AppSetEntityValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppSetEntityValue >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppCameraFrameRequest* Arena::CreateMaybeMessage< ::rustplus::AppCameraFrameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppCameraFrameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppPromoteToLeader* Arena::CreateMaybeMessage< ::rustplus::AppPromoteToLeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppPromoteToLeader >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppResponse* Arena::CreateMaybeMessage< ::rustplus::AppResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppBroadcast* Arena::CreateMaybeMessage< ::rustplus::AppBroadcast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppEmpty* Arena::CreateMaybeMessage< ::rustplus::AppEmpty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppEmpty >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppSuccess* Arena::CreateMaybeMessage< ::rustplus::AppSuccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppError* Arena::CreateMaybeMessage< ::rustplus::AppError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppError >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppInfo* Arena::CreateMaybeMessage< ::rustplus::AppInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppTime* Arena::CreateMaybeMessage< ::rustplus::AppTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppTime >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppMap_Monument* Arena::CreateMaybeMessage< ::rustplus::AppMap_Monument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppMap_Monument >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppMap* Arena::CreateMaybeMessage< ::rustplus::AppMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppMap >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppTeamInfo_Member* Arena::CreateMaybeMessage< ::rustplus::AppTeamInfo_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppTeamInfo_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppTeamInfo_Note* Arena::CreateMaybeMessage< ::rustplus::AppTeamInfo_Note >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppTeamInfo_Note >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppTeamInfo* Arena::CreateMaybeMessage< ::rustplus::AppTeamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppTeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppTeamChat* Arena::CreateMaybeMessage< ::rustplus::AppTeamChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppTeamChat >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppChatMessage* Arena::CreateMaybeMessage< ::rustplus::AppChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppEntityInfo* Arena::CreateMaybeMessage< ::rustplus::AppEntityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppEntityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppEntityPayload_Item* Arena::CreateMaybeMessage< ::rustplus::AppEntityPayload_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppEntityPayload_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppEntityPayload* Arena::CreateMaybeMessage< ::rustplus::AppEntityPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppEntityPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppFlag* Arena::CreateMaybeMessage< ::rustplus::AppFlag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppFlag >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppMapMarkers* Arena::CreateMaybeMessage< ::rustplus::AppMapMarkers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppMapMarkers >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::Vector4* Arena::CreateMaybeMessage< ::rustplus::Vector4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::Vector4 >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppMarker_SellOrder* Arena::CreateMaybeMessage< ::rustplus::AppMarker_SellOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppMarker_SellOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppMarker* Arena::CreateMaybeMessage< ::rustplus::AppMarker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppMarker >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppCameraFrame* Arena::CreateMaybeMessage< ::rustplus::AppCameraFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppCameraFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppTeamChanged* Arena::CreateMaybeMessage< ::rustplus::AppTeamChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppTeamChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppTeamMessage* Arena::CreateMaybeMessage< ::rustplus::AppTeamMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppTeamMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::rustplus::AppEntityChanged* Arena::CreateMaybeMessage< ::rustplus::AppEntityChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rustplus::AppEntityChanged >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
